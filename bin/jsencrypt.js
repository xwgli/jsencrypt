/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["JSEncrypt"] = factory();
	else
		root["JSEncrypt"] = factory();
})(window, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/JSEncrypt.js":
/*!**************************!*\
  !*** ./lib/JSEncrypt.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"JSEncrypt\": () => (/* binding */ JSEncrypt)\n/* harmony export */ });\n/* harmony import */ var _lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/jsbn/base64 */ \"./lib/lib/jsbn/base64.js\");\n/* harmony import */ var _JSEncryptRSAKey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./JSEncryptRSAKey */ \"./lib/JSEncryptRSAKey.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"./node_modules/process/browser.js\");\nvar _a;\r\n\r\n\r\nvar version = typeof process !== 'undefined'\r\n    ? (_a = process.env) === null || _a === void 0 ? void 0 : \"3.3.2.1\"\r\n    : undefined;\r\n/**\r\n *\r\n * @param {Object} [options = {}] - An object to customize JSEncrypt behaviour\r\n * possible parameters are:\r\n * - default_key_size        {number}  default: 1024 the key size in bit\r\n * - default_public_exponent {string}  default: '010001' the hexadecimal representation of the public exponent\r\n * - log                     {boolean} default: false whether log warn/error or not\r\n * @constructor\r\n */\r\nvar JSEncrypt = /** @class */ (function () {\r\n    function JSEncrypt(options) {\r\n        if (options === void 0) { options = {}; }\r\n        options = options || {};\r\n        this.default_key_size = options.default_key_size\r\n            ? parseInt(options.default_key_size, 10)\r\n            : 1024;\r\n        this.default_public_exponent = options.default_public_exponent || \"010001\"; // 65537 default openssl public exponent for rsa key type\r\n        this.log = options.log || false;\r\n        // The private and public key.\r\n        this.key = null;\r\n    }\r\n    /**\r\n     * Method to set the rsa key parameter (one method is enough to set both the public\r\n     * and the private key, since the private key contains the public key paramenters)\r\n     * Log a warning if logs are enabled\r\n     * @param {Object|string} key the pem encoded string or an object (with or without header/footer)\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.setKey = function (key) {\r\n        if (this.log && this.key) {\r\n            console.warn(\"A key was already set, overriding existing.\");\r\n        }\r\n        this.key = new _JSEncryptRSAKey__WEBPACK_IMPORTED_MODULE_1__.JSEncryptRSAKey(key);\r\n    };\r\n    /**\r\n     * Proxy method for setKey, for api compatibility\r\n     * @see setKey\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.setPrivateKey = function (privkey) {\r\n        // Create the key.\r\n        this.setKey(privkey);\r\n    };\r\n    /**\r\n     * Proxy method for setKey, for api compatibility\r\n     * @see setKey\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.setPublicKey = function (pubkey) {\r\n        // Sets the public key.\r\n        this.setKey(pubkey);\r\n    };\r\n    /**\r\n     * Proxy method for RSAKey object's decrypt, decrypt the string using the private\r\n     * components of the rsa key object. Note that if the object was not set will be created\r\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\r\n     * @param {string} str base64 encoded crypted string to decrypt\r\n     * @return {string} the decrypted string\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.decrypt = function (str) {\r\n        // Return the decrypted string.\r\n        try {\r\n            return this.getKey().decrypt((0,_lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__.b64tohex)(str));\r\n        }\r\n        catch (ex) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * 增加一个使用公钥解密的方法\r\n     * Proxy method for RSAKey object's decrypt, decrypt the string using the public\r\n     * components of the rsa key object. Note that if the object was not set will be created\r\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\r\n     * @param {string} str base64 encoded crypted string to decrypt\r\n     * @return {string} the decrypted string\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.decryptByPublic = function (str) {\r\n        // Return the decrypted string.\r\n        try {\r\n            return this.getKey().decryptByPublic((0,_lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__.b64tohex)(str));\r\n        }\r\n        catch (ex) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Proxy method for RSAKey object's encrypt, encrypt the string using the public\r\n     * components of the rsa key object. Note that if the object was not set will be created\r\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\r\n     * @param {string} str the string to encrypt\r\n     * @return {string} the encrypted string encoded in base64\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.encrypt = function (str) {\r\n        // Return the encrypted string.\r\n        try {\r\n            return (0,_lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__.hex2b64)(this.getKey().encrypt(str));\r\n        }\r\n        catch (ex) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * 增加一个使用私钥加密的方法\r\n     * Proxy method for RSAKey object's encrypt, encrypt the string using the private\r\n     * components of the rsa key object. Note that if the object was not set will be created\r\n     * on the fly (by the getKey method) using the parameters passed in the JSEncrypt constructor\r\n     * @param {string} str the string to encrypt\r\n     * @return {string} the encrypted string encoded in base64\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.encryptByPrivate = function (str) {\r\n        // Return the encrypted string.\r\n        try {\r\n            return (0,_lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__.hex2b64)(this.getKey().encryptByPrivate(str));\r\n        }\r\n        catch (ex) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Proxy method for RSAKey object's sign.\r\n     * @param {string} str the string to sign\r\n     * @param {function} digestMethod hash method\r\n     * @param {string} digestName the name of the hash algorithm\r\n     * @return {string} the signature encoded in base64\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.sign = function (str, digestMethod, digestName) {\r\n        // return the RSA signature of 'str' in 'hex' format.\r\n        try {\r\n            return (0,_lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__.hex2b64)(this.getKey().sign(str, digestMethod, digestName));\r\n        }\r\n        catch (ex) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Proxy method for RSAKey object's verify.\r\n     * @param {string} str the string to verify\r\n     * @param {string} signature the signature encoded in base64 to compare the string to\r\n     * @param {function} digestMethod hash method\r\n     * @return {boolean} whether the data and signature match\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.verify = function (str, signature, digestMethod) {\r\n        // Return the decrypted 'digest' of the signature.\r\n        try {\r\n            return this.getKey().verify(str, (0,_lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__.b64tohex)(signature), digestMethod);\r\n        }\r\n        catch (ex) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Getter for the current JSEncryptRSAKey object. If it doesn't exists a new object\r\n     * will be created and returned\r\n     * @param {callback} [cb] the callback to be called if we want the key to be generated\r\n     * in an async fashion\r\n     * @returns {JSEncryptRSAKey} the JSEncryptRSAKey object\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.getKey = function (cb) {\r\n        // Only create new if it does not exist.\r\n        if (!this.key) {\r\n            // Get a new private key.\r\n            this.key = new _JSEncryptRSAKey__WEBPACK_IMPORTED_MODULE_1__.JSEncryptRSAKey();\r\n            if (cb && {}.toString.call(cb) === \"[object Function]\") {\r\n                this.key.generateAsync(this.default_key_size, this.default_public_exponent, cb);\r\n                return;\r\n            }\r\n            // Generate the key.\r\n            this.key.generate(this.default_key_size, this.default_public_exponent);\r\n        }\r\n        return this.key;\r\n    };\r\n    /**\r\n     * Returns the pem encoded representation of the private key\r\n     * If the key doesn't exists a new key will be created\r\n     * @returns {string} pem encoded representation of the private key WITH header and footer\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.getPrivateKey = function () {\r\n        // Return the private representation of this key.\r\n        return this.getKey().getPrivateKey();\r\n    };\r\n    /**\r\n     * Returns the pem encoded representation of the private key\r\n     * If the key doesn't exists a new key will be created\r\n     * @returns {string} pem encoded representation of the private key WITHOUT header and footer\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.getPrivateKeyB64 = function () {\r\n        // Return the private representation of this key.\r\n        return this.getKey().getPrivateBaseKeyB64();\r\n    };\r\n    /**\r\n     * Returns the pem encoded representation of the public key\r\n     * If the key doesn't exists a new key will be created\r\n     * @returns {string} pem encoded representation of the public key WITH header and footer\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.getPublicKey = function () {\r\n        // Return the private representation of this key.\r\n        return this.getKey().getPublicKey();\r\n    };\r\n    /**\r\n     * Returns the pem encoded representation of the public key\r\n     * If the key doesn't exists a new key will be created\r\n     * @returns {string} pem encoded representation of the public key WITHOUT header and footer\r\n     * @public\r\n     */\r\n    JSEncrypt.prototype.getPublicKeyB64 = function () {\r\n        // Return the private representation of this key.\r\n        return this.getKey().getPublicBaseKeyB64();\r\n    };\r\n    JSEncrypt.version = version;\r\n    return JSEncrypt;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/JSEncrypt.js?");

/***/ }),

/***/ "./lib/JSEncryptRSAKey.js":
/*!********************************!*\
  !*** ./lib/JSEncryptRSAKey.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"JSEncryptRSAKey\": () => (/* binding */ JSEncryptRSAKey)\n/* harmony export */ });\n/* harmony import */ var _lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/jsbn/base64 */ \"./lib/lib/jsbn/base64.js\");\n/* harmony import */ var _lib_asn1js_hex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/asn1js/hex */ \"./lib/lib/asn1js/hex.js\");\n/* harmony import */ var _lib_asn1js_base64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/asn1js/base64 */ \"./lib/lib/asn1js/base64.js\");\n/* harmony import */ var _lib_asn1js_asn1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/asn1js/asn1 */ \"./lib/lib/asn1js/asn1.js\");\n/* harmony import */ var _lib_jsbn_rsa__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/jsbn/rsa */ \"./lib/lib/jsbn/rsa.js\");\n/* harmony import */ var _lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/jsbn/jsbn */ \"./lib/lib/jsbn/jsbn.js\");\n/* harmony import */ var _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/jsrsasign/asn1-1.0 */ \"./lib/lib/jsrsasign/asn1-1.0.js\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Create a new JSEncryptRSAKey that extends Tom Wu's RSA key object.\r\n * This object is just a decorator for parsing the key parameter\r\n * @param {string|Object} key - The key in string format, or an object containing\r\n * the parameters needed to build a RSAKey object.\r\n * @constructor\r\n */\r\nvar JSEncryptRSAKey = /** @class */ (function (_super) {\r\n    __extends(JSEncryptRSAKey, _super);\r\n    function JSEncryptRSAKey(key) {\r\n        var _this = _super.call(this) || this;\r\n        // Call the super constructor.\r\n        //  RSAKey.call(this);\r\n        // If a key key was provided.\r\n        if (key) {\r\n            // If this is a string...\r\n            if (typeof key === \"string\") {\r\n                _this.parseKey(key);\r\n            }\r\n            else if (JSEncryptRSAKey.hasPrivateKeyProperty(key) ||\r\n                JSEncryptRSAKey.hasPublicKeyProperty(key)) {\r\n                // Set the values for the key.\r\n                _this.parsePropertiesFrom(key);\r\n            }\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Method to parse a pem encoded string containing both a public or private key.\r\n     * The method will translate the pem encoded string in a der encoded string and\r\n     * will parse private key and public key parameters. This method accepts public key\r\n     * in the rsaencryption pkcs #1 format (oid: 1.2.840.113549.1.1.1).\r\n     *\r\n     * @todo Check how many rsa formats use the same format of pkcs #1.\r\n     *\r\n     * The format is defined as:\r\n     * PublicKeyInfo ::= SEQUENCE {\r\n     *   algorithm       AlgorithmIdentifier,\r\n     *   PublicKey       BIT STRING\r\n     * }\r\n     * Where AlgorithmIdentifier is:\r\n     * AlgorithmIdentifier ::= SEQUENCE {\r\n     *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\r\n     *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\r\n     * }\r\n     * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\r\n     * RSAPublicKey ::= SEQUENCE {\r\n     *   modulus           INTEGER,  -- n\r\n     *   publicExponent    INTEGER   -- e\r\n     * }\r\n     * it's possible to examine the structure of the keys obtained from openssl using\r\n     * an asn.1 dumper as the one used here to parse the components: http://lapo.it/asn1js/\r\n     * @argument {string} pem the pem encoded string, can include the BEGIN/END header/footer\r\n     * @private\r\n     */\r\n    JSEncryptRSAKey.prototype.parseKey = function (pem) {\r\n        try {\r\n            var modulus = 0;\r\n            var public_exponent = 0;\r\n            var reHex = /^\\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\\s*)+$/;\r\n            var der = reHex.test(pem) ? _lib_asn1js_hex__WEBPACK_IMPORTED_MODULE_1__.Hex.decode(pem) : _lib_asn1js_base64__WEBPACK_IMPORTED_MODULE_2__.Base64.unarmor(pem);\r\n            var asn1 = _lib_asn1js_asn1__WEBPACK_IMPORTED_MODULE_3__.ASN1.decode(der);\r\n            // Fixes a bug with OpenSSL 1.0+ private keys\r\n            if (asn1.sub.length === 3) {\r\n                asn1 = asn1.sub[2].sub[0];\r\n            }\r\n            if (asn1.sub.length === 9) {\r\n                // Parse the private key.\r\n                modulus = asn1.sub[1].getHexStringValue(); // bigint\r\n                this.n = (0,_lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__.parseBigInt)(modulus, 16);\r\n                public_exponent = asn1.sub[2].getHexStringValue(); // int\r\n                this.e = parseInt(public_exponent, 16);\r\n                var private_exponent = asn1.sub[3].getHexStringValue(); // bigint\r\n                this.d = (0,_lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__.parseBigInt)(private_exponent, 16);\r\n                var prime1 = asn1.sub[4].getHexStringValue(); // bigint\r\n                this.p = (0,_lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__.parseBigInt)(prime1, 16);\r\n                var prime2 = asn1.sub[5].getHexStringValue(); // bigint\r\n                this.q = (0,_lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__.parseBigInt)(prime2, 16);\r\n                var exponent1 = asn1.sub[6].getHexStringValue(); // bigint\r\n                this.dmp1 = (0,_lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__.parseBigInt)(exponent1, 16);\r\n                var exponent2 = asn1.sub[7].getHexStringValue(); // bigint\r\n                this.dmq1 = (0,_lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__.parseBigInt)(exponent2, 16);\r\n                var coefficient = asn1.sub[8].getHexStringValue(); // bigint\r\n                this.coeff = (0,_lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__.parseBigInt)(coefficient, 16);\r\n            }\r\n            else if (asn1.sub.length === 2) {\r\n                if (asn1.sub[0].sub) {\r\n                    // Parse ASN.1 SubjectPublicKeyInfo type as defined by X.509\r\n                    var bit_string = asn1.sub[1];\r\n                    var sequence = bit_string.sub[0];\r\n                    modulus = sequence.sub[0].getHexStringValue();\r\n                    this.n = (0,_lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__.parseBigInt)(modulus, 16);\r\n                    public_exponent = sequence.sub[1].getHexStringValue();\r\n                    this.e = parseInt(public_exponent, 16);\r\n                }\r\n                else {\r\n                    // Parse ASN.1 RSAPublicKey type as defined by PKCS #1\r\n                    modulus = asn1.sub[0].getHexStringValue();\r\n                    this.n = (0,_lib_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_5__.parseBigInt)(modulus, 16);\r\n                    public_exponent = asn1.sub[1].getHexStringValue();\r\n                    this.e = parseInt(public_exponent, 16);\r\n                }\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n        catch (ex) {\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Translate rsa parameters in a hex encoded string representing the rsa key.\r\n     *\r\n     * The translation follow the ASN.1 notation :\r\n     * RSAPrivateKey ::= SEQUENCE {\r\n     *   version           Version,\r\n     *   modulus           INTEGER,  -- n\r\n     *   publicExponent    INTEGER,  -- e\r\n     *   privateExponent   INTEGER,  -- d\r\n     *   prime1            INTEGER,  -- p\r\n     *   prime2            INTEGER,  -- q\r\n     *   exponent1         INTEGER,  -- d mod (p1)\r\n     *   exponent2         INTEGER,  -- d mod (q-1)\r\n     *   coefficient       INTEGER,  -- (inverse of q) mod p\r\n     * }\r\n     * @returns {string}  DER Encoded String representing the rsa private key\r\n     * @private\r\n     */\r\n    JSEncryptRSAKey.prototype.getPrivateBaseKey = function () {\r\n        var options = {\r\n            array: [\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ int: 0 }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ bigint: this.n }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ int: this.e }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ bigint: this.d }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ bigint: this.p }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ bigint: this.q }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ bigint: this.dmp1 }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ bigint: this.dmq1 }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ bigint: this.coeff }),\r\n            ],\r\n        };\r\n        var seq = new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERSequence(options);\r\n        return seq.getEncodedHex();\r\n    };\r\n    /**\r\n     * base64 (pem) encoded version of the DER encoded representation\r\n     * @returns {string} pem encoded representation without header and footer\r\n     * @public\r\n     */\r\n    JSEncryptRSAKey.prototype.getPrivateBaseKeyB64 = function () {\r\n        return (0,_lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__.hex2b64)(this.getPrivateBaseKey());\r\n    };\r\n    /**\r\n     * Translate rsa parameters in a hex encoded string representing the rsa public key.\r\n     * The representation follow the ASN.1 notation :\r\n     * PublicKeyInfo ::= SEQUENCE {\r\n     *   algorithm       AlgorithmIdentifier,\r\n     *   PublicKey       BIT STRING\r\n     * }\r\n     * Where AlgorithmIdentifier is:\r\n     * AlgorithmIdentifier ::= SEQUENCE {\r\n     *   algorithm       OBJECT IDENTIFIER,     the OID of the enc algorithm\r\n     *   parameters      ANY DEFINED BY algorithm OPTIONAL (NULL for PKCS #1)\r\n     * }\r\n     * and PublicKey is a SEQUENCE encapsulated in a BIT STRING\r\n     * RSAPublicKey ::= SEQUENCE {\r\n     *   modulus           INTEGER,  -- n\r\n     *   publicExponent    INTEGER   -- e\r\n     * }\r\n     * @returns {string} DER Encoded String representing the rsa public key\r\n     * @private\r\n     */\r\n    JSEncryptRSAKey.prototype.getPublicBaseKey = function () {\r\n        var first_sequence = new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERSequence({\r\n            array: [\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERObjectIdentifier({ oid: \"1.2.840.113549.1.1.1\" }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERNull(),\r\n            ],\r\n        });\r\n        var second_sequence = new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERSequence({\r\n            array: [\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ bigint: this.n }),\r\n                new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERInteger({ int: this.e }),\r\n            ],\r\n        });\r\n        var bit_string = new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERBitString({\r\n            hex: \"00\" + second_sequence.getEncodedHex(),\r\n        });\r\n        var seq = new _lib_jsrsasign_asn1_1_0__WEBPACK_IMPORTED_MODULE_6__.KJUR.asn1.DERSequence({\r\n            array: [first_sequence, bit_string],\r\n        });\r\n        return seq.getEncodedHex();\r\n    };\r\n    /**\r\n     * base64 (pem) encoded version of the DER encoded representation\r\n     * @returns {string} pem encoded representation without header and footer\r\n     * @public\r\n     */\r\n    JSEncryptRSAKey.prototype.getPublicBaseKeyB64 = function () {\r\n        return (0,_lib_jsbn_base64__WEBPACK_IMPORTED_MODULE_0__.hex2b64)(this.getPublicBaseKey());\r\n    };\r\n    /**\r\n     * wrap the string in block of width chars. The default value for rsa keys is 64\r\n     * characters.\r\n     * @param {string} str the pem encoded string without header and footer\r\n     * @param {Number} [width=64] - the length the string has to be wrapped at\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    JSEncryptRSAKey.wordwrap = function (str, width) {\r\n        width = width || 64;\r\n        if (!str) {\r\n            return str;\r\n        }\r\n        var regex = \"(.{1,\" + width + \"})( +|$\\n?)|(.{1,\" + width + \"})\";\r\n        return str.match(RegExp(regex, \"g\")).join(\"\\n\");\r\n    };\r\n    /**\r\n     * Retrieve the pem encoded private key\r\n     * @returns {string} the pem encoded private key with header/footer\r\n     * @public\r\n     */\r\n    JSEncryptRSAKey.prototype.getPrivateKey = function () {\r\n        var key = \"-----BEGIN RSA PRIVATE KEY-----\\n\";\r\n        key += JSEncryptRSAKey.wordwrap(this.getPrivateBaseKeyB64()) + \"\\n\";\r\n        key += \"-----END RSA PRIVATE KEY-----\";\r\n        return key;\r\n    };\r\n    /**\r\n     * Retrieve the pem encoded public key\r\n     * @returns {string} the pem encoded public key with header/footer\r\n     * @public\r\n     */\r\n    JSEncryptRSAKey.prototype.getPublicKey = function () {\r\n        var key = \"-----BEGIN PUBLIC KEY-----\\n\";\r\n        key += JSEncryptRSAKey.wordwrap(this.getPublicBaseKeyB64()) + \"\\n\";\r\n        key += \"-----END PUBLIC KEY-----\";\r\n        return key;\r\n    };\r\n    /**\r\n     * Check if the object contains the necessary parameters to populate the rsa modulus\r\n     * and public exponent parameters.\r\n     * @param {Object} [obj={}] - An object that may contain the two public key\r\n     * parameters\r\n     * @returns {boolean} true if the object contains both the modulus and the public exponent\r\n     * properties (n and e)\r\n     * @todo check for types of n and e. N should be a parseable bigInt object, E should\r\n     * be a parseable integer number\r\n     * @private\r\n     */\r\n    JSEncryptRSAKey.hasPublicKeyProperty = function (obj) {\r\n        obj = obj || {};\r\n        return obj.hasOwnProperty(\"n\") && obj.hasOwnProperty(\"e\");\r\n    };\r\n    /**\r\n     * Check if the object contains ALL the parameters of an RSA key.\r\n     * @param {Object} [obj={}] - An object that may contain nine rsa key\r\n     * parameters\r\n     * @returns {boolean} true if the object contains all the parameters needed\r\n     * @todo check for types of the parameters all the parameters but the public exponent\r\n     * should be parseable bigint objects, the public exponent should be a parseable integer number\r\n     * @private\r\n     */\r\n    JSEncryptRSAKey.hasPrivateKeyProperty = function (obj) {\r\n        obj = obj || {};\r\n        return (obj.hasOwnProperty(\"n\") &&\r\n            obj.hasOwnProperty(\"e\") &&\r\n            obj.hasOwnProperty(\"d\") &&\r\n            obj.hasOwnProperty(\"p\") &&\r\n            obj.hasOwnProperty(\"q\") &&\r\n            obj.hasOwnProperty(\"dmp1\") &&\r\n            obj.hasOwnProperty(\"dmq1\") &&\r\n            obj.hasOwnProperty(\"coeff\"));\r\n    };\r\n    /**\r\n     * Parse the properties of obj in the current rsa object. Obj should AT LEAST\r\n     * include the modulus and public exponent (n, e) parameters.\r\n     * @param {Object} obj - the object containing rsa parameters\r\n     * @private\r\n     */\r\n    JSEncryptRSAKey.prototype.parsePropertiesFrom = function (obj) {\r\n        this.n = obj.n;\r\n        this.e = obj.e;\r\n        if (obj.hasOwnProperty(\"d\")) {\r\n            this.d = obj.d;\r\n            this.p = obj.p;\r\n            this.q = obj.q;\r\n            this.dmp1 = obj.dmp1;\r\n            this.dmq1 = obj.dmq1;\r\n            this.coeff = obj.coeff;\r\n        }\r\n    };\r\n    return JSEncryptRSAKey;\r\n}(_lib_jsbn_rsa__WEBPACK_IMPORTED_MODULE_4__.RSAKey));\r\n\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/JSEncryptRSAKey.js?");

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"JSEncrypt\": () => (/* reexport safe */ _JSEncrypt__WEBPACK_IMPORTED_MODULE_0__.JSEncrypt),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _JSEncrypt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JSEncrypt */ \"./lib/JSEncrypt.js\");\n\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_JSEncrypt__WEBPACK_IMPORTED_MODULE_0__.JSEncrypt);\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/index.js?");

/***/ }),

/***/ "./lib/lib/asn1js/asn1.js":
/*!********************************!*\
  !*** ./lib/lib/asn1js/asn1.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ASN1\": () => (/* binding */ ASN1),\n/* harmony export */   \"ASN1Tag\": () => (/* binding */ ASN1Tag),\n/* harmony export */   \"Stream\": () => (/* binding */ Stream)\n/* harmony export */ });\n/* harmony import */ var _int10__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./int10 */ \"./lib/lib/asn1js/int10.js\");\n// ASN.1 JavaScript decoder\r\n// Copyright (c) 2008-2014 Lapo Luchini <lapo@lapo.it>\r\n// Permission to use, copy, modify, and/or distribute this software for any\r\n// purpose with or without fee is hereby granted, provided that the above\r\n// copyright notice and this permission notice appear in all copies.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\r\n/*global oids */\r\n\r\nvar ellipsis = \"\\u2026\";\r\nvar reTimeS = /^(\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;\r\nvar reTimeL = /^(\\d\\d\\d\\d)(0[1-9]|1[0-2])(0[1-9]|[12]\\d|3[01])([01]\\d|2[0-3])(?:([0-5]\\d)(?:([0-5]\\d)(?:[.,](\\d{1,3}))?)?)?(Z|[-+](?:[0]\\d|1[0-2])([0-5]\\d)?)?$/;\r\nfunction stringCut(str, len) {\r\n    if (str.length > len) {\r\n        str = str.substring(0, len) + ellipsis;\r\n    }\r\n    return str;\r\n}\r\nvar Stream = /** @class */ (function () {\r\n    function Stream(enc, pos) {\r\n        this.hexDigits = \"0123456789ABCDEF\";\r\n        if (enc instanceof Stream) {\r\n            this.enc = enc.enc;\r\n            this.pos = enc.pos;\r\n        }\r\n        else {\r\n            // enc should be an array or a binary string\r\n            this.enc = enc;\r\n            this.pos = pos;\r\n        }\r\n    }\r\n    Stream.prototype.get = function (pos) {\r\n        if (pos === undefined) {\r\n            pos = this.pos++;\r\n        }\r\n        if (pos >= this.enc.length) {\r\n            throw new Error(\"Requesting byte offset \".concat(pos, \" on a stream of length \").concat(this.enc.length));\r\n        }\r\n        return (\"string\" === typeof this.enc) ? this.enc.charCodeAt(pos) : this.enc[pos];\r\n    };\r\n    Stream.prototype.hexByte = function (b) {\r\n        return this.hexDigits.charAt((b >> 4) & 0xF) + this.hexDigits.charAt(b & 0xF);\r\n    };\r\n    Stream.prototype.hexDump = function (start, end, raw) {\r\n        var s = \"\";\r\n        for (var i = start; i < end; ++i) {\r\n            s += this.hexByte(this.get(i));\r\n            if (raw !== true) {\r\n                switch (i & 0xF) {\r\n                    case 0x7:\r\n                        s += \"  \";\r\n                        break;\r\n                    case 0xF:\r\n                        s += \"\\n\";\r\n                        break;\r\n                    default:\r\n                        s += \" \";\r\n                }\r\n            }\r\n        }\r\n        return s;\r\n    };\r\n    Stream.prototype.isASCII = function (start, end) {\r\n        for (var i = start; i < end; ++i) {\r\n            var c = this.get(i);\r\n            if (c < 32 || c > 176) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    Stream.prototype.parseStringISO = function (start, end) {\r\n        var s = \"\";\r\n        for (var i = start; i < end; ++i) {\r\n            s += String.fromCharCode(this.get(i));\r\n        }\r\n        return s;\r\n    };\r\n    Stream.prototype.parseStringUTF = function (start, end) {\r\n        var s = \"\";\r\n        for (var i = start; i < end;) {\r\n            var c = this.get(i++);\r\n            if (c < 128) {\r\n                s += String.fromCharCode(c);\r\n            }\r\n            else if ((c > 191) && (c < 224)) {\r\n                s += String.fromCharCode(((c & 0x1F) << 6) | (this.get(i++) & 0x3F));\r\n            }\r\n            else {\r\n                s += String.fromCharCode(((c & 0x0F) << 12) | ((this.get(i++) & 0x3F) << 6) | (this.get(i++) & 0x3F));\r\n            }\r\n        }\r\n        return s;\r\n    };\r\n    Stream.prototype.parseStringBMP = function (start, end) {\r\n        var str = \"\";\r\n        var hi;\r\n        var lo;\r\n        for (var i = start; i < end;) {\r\n            hi = this.get(i++);\r\n            lo = this.get(i++);\r\n            str += String.fromCharCode((hi << 8) | lo);\r\n        }\r\n        return str;\r\n    };\r\n    Stream.prototype.parseTime = function (start, end, shortYear) {\r\n        var s = this.parseStringISO(start, end);\r\n        var m = (shortYear ? reTimeS : reTimeL).exec(s);\r\n        if (!m) {\r\n            return \"Unrecognized time: \" + s;\r\n        }\r\n        if (shortYear) {\r\n            // to avoid querying the timer, use the fixed range [1970, 2069]\r\n            // it will conform with ITU X.400 [-10, +40] sliding window until 2030\r\n            m[1] = +m[1];\r\n            m[1] += (+m[1] < 70) ? 2000 : 1900;\r\n        }\r\n        s = m[1] + \"-\" + m[2] + \"-\" + m[3] + \" \" + m[4];\r\n        if (m[5]) {\r\n            s += \":\" + m[5];\r\n            if (m[6]) {\r\n                s += \":\" + m[6];\r\n                if (m[7]) {\r\n                    s += \".\" + m[7];\r\n                }\r\n            }\r\n        }\r\n        if (m[8]) {\r\n            s += \" UTC\";\r\n            if (m[8] != \"Z\") {\r\n                s += m[8];\r\n                if (m[9]) {\r\n                    s += \":\" + m[9];\r\n                }\r\n            }\r\n        }\r\n        return s;\r\n    };\r\n    Stream.prototype.parseInteger = function (start, end) {\r\n        var v = this.get(start);\r\n        var neg = (v > 127);\r\n        var pad = neg ? 255 : 0;\r\n        var len;\r\n        var s = \"\";\r\n        // skip unuseful bits (not allowed in DER)\r\n        while (v == pad && ++start < end) {\r\n            v = this.get(start);\r\n        }\r\n        len = end - start;\r\n        if (len === 0) {\r\n            return neg ? -1 : 0;\r\n        }\r\n        // show bit length of huge integers\r\n        if (len > 4) {\r\n            s = v;\r\n            len <<= 3;\r\n            while (((+s ^ pad) & 0x80) == 0) {\r\n                s = +s << 1;\r\n                --len;\r\n            }\r\n            s = \"(\" + len + \" bit)\\n\";\r\n        }\r\n        // decode the integer\r\n        if (neg) {\r\n            v = v - 256;\r\n        }\r\n        var n = new _int10__WEBPACK_IMPORTED_MODULE_0__.Int10(v);\r\n        for (var i = start + 1; i < end; ++i) {\r\n            n.mulAdd(256, this.get(i));\r\n        }\r\n        return s + n.toString();\r\n    };\r\n    Stream.prototype.parseBitString = function (start, end, maxLength) {\r\n        var unusedBit = this.get(start);\r\n        var lenBit = ((end - start - 1) << 3) - unusedBit;\r\n        var intro = \"(\" + lenBit + \" bit)\\n\";\r\n        var s = \"\";\r\n        for (var i = start + 1; i < end; ++i) {\r\n            var b = this.get(i);\r\n            var skip = (i == end - 1) ? unusedBit : 0;\r\n            for (var j = 7; j >= skip; --j) {\r\n                s += (b >> j) & 1 ? \"1\" : \"0\";\r\n            }\r\n            if (s.length > maxLength) {\r\n                return intro + stringCut(s, maxLength);\r\n            }\r\n        }\r\n        return intro + s;\r\n    };\r\n    Stream.prototype.parseOctetString = function (start, end, maxLength) {\r\n        if (this.isASCII(start, end)) {\r\n            return stringCut(this.parseStringISO(start, end), maxLength);\r\n        }\r\n        var len = end - start;\r\n        var s = \"(\" + len + \" byte)\\n\";\r\n        maxLength /= 2; // we work in bytes\r\n        if (len > maxLength) {\r\n            end = start + maxLength;\r\n        }\r\n        for (var i = start; i < end; ++i) {\r\n            s += this.hexByte(this.get(i));\r\n        }\r\n        if (len > maxLength) {\r\n            s += ellipsis;\r\n        }\r\n        return s;\r\n    };\r\n    Stream.prototype.parseOID = function (start, end, maxLength) {\r\n        var s = \"\";\r\n        var n = new _int10__WEBPACK_IMPORTED_MODULE_0__.Int10();\r\n        var bits = 0;\r\n        for (var i = start; i < end; ++i) {\r\n            var v = this.get(i);\r\n            n.mulAdd(128, v & 0x7F);\r\n            bits += 7;\r\n            if (!(v & 0x80)) { // finished\r\n                if (s === \"\") {\r\n                    n = n.simplify();\r\n                    if (n instanceof _int10__WEBPACK_IMPORTED_MODULE_0__.Int10) {\r\n                        n.sub(80);\r\n                        s = \"2.\" + n.toString();\r\n                    }\r\n                    else {\r\n                        var m = n < 80 ? n < 40 ? 0 : 1 : 2;\r\n                        s = m + \".\" + (n - m * 40);\r\n                    }\r\n                }\r\n                else {\r\n                    s += \".\" + n.toString();\r\n                }\r\n                if (s.length > maxLength) {\r\n                    return stringCut(s, maxLength);\r\n                }\r\n                n = new _int10__WEBPACK_IMPORTED_MODULE_0__.Int10();\r\n                bits = 0;\r\n            }\r\n        }\r\n        if (bits > 0) {\r\n            s += \".incomplete\";\r\n        }\r\n        return s;\r\n    };\r\n    return Stream;\r\n}());\r\n\r\nvar ASN1 = /** @class */ (function () {\r\n    function ASN1(stream, header, length, tag, sub) {\r\n        if (!(tag instanceof ASN1Tag)) {\r\n            throw new Error(\"Invalid tag value.\");\r\n        }\r\n        this.stream = stream;\r\n        this.header = header;\r\n        this.length = length;\r\n        this.tag = tag;\r\n        this.sub = sub;\r\n    }\r\n    ASN1.prototype.typeName = function () {\r\n        switch (this.tag.tagClass) {\r\n            case 0: // universal\r\n                switch (this.tag.tagNumber) {\r\n                    case 0x00:\r\n                        return \"EOC\";\r\n                    case 0x01:\r\n                        return \"BOOLEAN\";\r\n                    case 0x02:\r\n                        return \"INTEGER\";\r\n                    case 0x03:\r\n                        return \"BIT_STRING\";\r\n                    case 0x04:\r\n                        return \"OCTET_STRING\";\r\n                    case 0x05:\r\n                        return \"NULL\";\r\n                    case 0x06:\r\n                        return \"OBJECT_IDENTIFIER\";\r\n                    case 0x07:\r\n                        return \"ObjectDescriptor\";\r\n                    case 0x08:\r\n                        return \"EXTERNAL\";\r\n                    case 0x09:\r\n                        return \"REAL\";\r\n                    case 0x0A:\r\n                        return \"ENUMERATED\";\r\n                    case 0x0B:\r\n                        return \"EMBEDDED_PDV\";\r\n                    case 0x0C:\r\n                        return \"UTF8String\";\r\n                    case 0x10:\r\n                        return \"SEQUENCE\";\r\n                    case 0x11:\r\n                        return \"SET\";\r\n                    case 0x12:\r\n                        return \"NumericString\";\r\n                    case 0x13:\r\n                        return \"PrintableString\"; // ASCII subset\r\n                    case 0x14:\r\n                        return \"TeletexString\"; // aka T61String\r\n                    case 0x15:\r\n                        return \"VideotexString\";\r\n                    case 0x16:\r\n                        return \"IA5String\"; // ASCII\r\n                    case 0x17:\r\n                        return \"UTCTime\";\r\n                    case 0x18:\r\n                        return \"GeneralizedTime\";\r\n                    case 0x19:\r\n                        return \"GraphicString\";\r\n                    case 0x1A:\r\n                        return \"VisibleString\"; // ASCII subset\r\n                    case 0x1B:\r\n                        return \"GeneralString\";\r\n                    case 0x1C:\r\n                        return \"UniversalString\";\r\n                    case 0x1E:\r\n                        return \"BMPString\";\r\n                }\r\n                return \"Universal_\" + this.tag.tagNumber.toString();\r\n            case 1:\r\n                return \"Application_\" + this.tag.tagNumber.toString();\r\n            case 2:\r\n                return \"[\" + this.tag.tagNumber.toString() + \"]\"; // Context\r\n            case 3:\r\n                return \"Private_\" + this.tag.tagNumber.toString();\r\n        }\r\n    };\r\n    ASN1.prototype.content = function (maxLength) {\r\n        if (this.tag === undefined) {\r\n            return null;\r\n        }\r\n        if (maxLength === undefined) {\r\n            maxLength = Infinity;\r\n        }\r\n        var content = this.posContent();\r\n        var len = Math.abs(this.length);\r\n        if (!this.tag.isUniversal()) {\r\n            if (this.sub !== null) {\r\n                return \"(\" + this.sub.length + \" elem)\";\r\n            }\r\n            return this.stream.parseOctetString(content, content + len, maxLength);\r\n        }\r\n        switch (this.tag.tagNumber) {\r\n            case 0x01: // BOOLEAN\r\n                return (this.stream.get(content) === 0) ? \"false\" : \"true\";\r\n            case 0x02: // INTEGER\r\n                return this.stream.parseInteger(content, content + len);\r\n            case 0x03: // BIT_STRING\r\n                return this.sub ? \"(\" + this.sub.length + \" elem)\" :\r\n                    this.stream.parseBitString(content, content + len, maxLength);\r\n            case 0x04: // OCTET_STRING\r\n                return this.sub ? \"(\" + this.sub.length + \" elem)\" :\r\n                    this.stream.parseOctetString(content, content + len, maxLength);\r\n            // case 0x05: // NULL\r\n            case 0x06: // OBJECT_IDENTIFIER\r\n                return this.stream.parseOID(content, content + len, maxLength);\r\n            // case 0x07: // ObjectDescriptor\r\n            // case 0x08: // EXTERNAL\r\n            // case 0x09: // REAL\r\n            // case 0x0A: // ENUMERATED\r\n            // case 0x0B: // EMBEDDED_PDV\r\n            case 0x10: // SEQUENCE\r\n            case 0x11: // SET\r\n                if (this.sub !== null) {\r\n                    return \"(\" + this.sub.length + \" elem)\";\r\n                }\r\n                else {\r\n                    return \"(no elem)\";\r\n                }\r\n            case 0x0C: // UTF8String\r\n                return stringCut(this.stream.parseStringUTF(content, content + len), maxLength);\r\n            case 0x12: // NumericString\r\n            case 0x13: // PrintableString\r\n            case 0x14: // TeletexString\r\n            case 0x15: // VideotexString\r\n            case 0x16: // IA5String\r\n            // case 0x19: // GraphicString\r\n            case 0x1A: // VisibleString\r\n                // case 0x1B: // GeneralString\r\n                // case 0x1C: // UniversalString\r\n                return stringCut(this.stream.parseStringISO(content, content + len), maxLength);\r\n            case 0x1E: // BMPString\r\n                return stringCut(this.stream.parseStringBMP(content, content + len), maxLength);\r\n            case 0x17: // UTCTime\r\n            case 0x18: // GeneralizedTime\r\n                return this.stream.parseTime(content, content + len, (this.tag.tagNumber == 0x17));\r\n        }\r\n        return null;\r\n    };\r\n    ASN1.prototype.toString = function () {\r\n        return this.typeName() + \"@\" + this.stream.pos + \"[header:\" + this.header + \",length:\" + this.length + \",sub:\" + ((this.sub === null) ? \"null\" : this.sub.length) + \"]\";\r\n    };\r\n    ASN1.prototype.toPrettyString = function (indent) {\r\n        if (indent === undefined) {\r\n            indent = \"\";\r\n        }\r\n        var s = indent + this.typeName() + \" @\" + this.stream.pos;\r\n        if (this.length >= 0) {\r\n            s += \"+\";\r\n        }\r\n        s += this.length;\r\n        if (this.tag.tagConstructed) {\r\n            s += \" (constructed)\";\r\n        }\r\n        else if ((this.tag.isUniversal() && ((this.tag.tagNumber == 0x03) || (this.tag.tagNumber == 0x04))) && (this.sub !== null)) {\r\n            s += \" (encapsulates)\";\r\n        }\r\n        s += \"\\n\";\r\n        if (this.sub !== null) {\r\n            indent += \"  \";\r\n            for (var i = 0, max = this.sub.length; i < max; ++i) {\r\n                s += this.sub[i].toPrettyString(indent);\r\n            }\r\n        }\r\n        return s;\r\n    };\r\n    ASN1.prototype.posStart = function () {\r\n        return this.stream.pos;\r\n    };\r\n    ASN1.prototype.posContent = function () {\r\n        return this.stream.pos + this.header;\r\n    };\r\n    ASN1.prototype.posEnd = function () {\r\n        return this.stream.pos + this.header + Math.abs(this.length);\r\n    };\r\n    ASN1.prototype.toHexString = function () {\r\n        return this.stream.hexDump(this.posStart(), this.posEnd(), true);\r\n    };\r\n    ASN1.decodeLength = function (stream) {\r\n        var buf = stream.get();\r\n        var len = buf & 0x7F;\r\n        if (len == buf) {\r\n            return len;\r\n        }\r\n        // no reason to use Int10, as it would be a huge buffer anyways\r\n        if (len > 6) {\r\n            throw new Error(\"Length over 48 bits not supported at position \" + (stream.pos - 1));\r\n        }\r\n        if (len === 0) {\r\n            return null;\r\n        } // undefined\r\n        buf = 0;\r\n        for (var i = 0; i < len; ++i) {\r\n            buf = (buf * 256) + stream.get();\r\n        }\r\n        return buf;\r\n    };\r\n    /**\r\n     * Retrieve the hexadecimal value (as a string) of the current ASN.1 element\r\n     * @returns {string}\r\n     * @public\r\n     */\r\n    ASN1.prototype.getHexStringValue = function () {\r\n        var hexString = this.toHexString();\r\n        var offset = this.header * 2;\r\n        var length = this.length * 2;\r\n        return hexString.substr(offset, length);\r\n    };\r\n    ASN1.decode = function (str) {\r\n        var stream;\r\n        if (!(str instanceof Stream)) {\r\n            stream = new Stream(str, 0);\r\n        }\r\n        else {\r\n            stream = str;\r\n        }\r\n        var streamStart = new Stream(stream);\r\n        var tag = new ASN1Tag(stream);\r\n        var len = ASN1.decodeLength(stream);\r\n        var start = stream.pos;\r\n        var header = start - streamStart.pos;\r\n        var sub = null;\r\n        var getSub = function () {\r\n            var ret = [];\r\n            if (len !== null) {\r\n                // definite length\r\n                var end = start + len;\r\n                while (stream.pos < end) {\r\n                    ret[ret.length] = ASN1.decode(stream);\r\n                }\r\n                if (stream.pos != end) {\r\n                    throw new Error(\"Content size is not correct for container starting at offset \" + start);\r\n                }\r\n            }\r\n            else {\r\n                // undefined length\r\n                try {\r\n                    for (;;) {\r\n                        var s = ASN1.decode(stream);\r\n                        if (s.tag.isEOC()) {\r\n                            break;\r\n                        }\r\n                        ret[ret.length] = s;\r\n                    }\r\n                    len = start - stream.pos; // undefined lengths are represented as negative values\r\n                }\r\n                catch (e) {\r\n                    throw new Error(\"Exception while decoding undefined length content: \" + e);\r\n                }\r\n            }\r\n            return ret;\r\n        };\r\n        if (tag.tagConstructed) {\r\n            // must have valid content\r\n            sub = getSub();\r\n        }\r\n        else if (tag.isUniversal() && ((tag.tagNumber == 0x03) || (tag.tagNumber == 0x04))) {\r\n            // sometimes BitString and OctetString are used to encapsulate ASN.1\r\n            try {\r\n                if (tag.tagNumber == 0x03) {\r\n                    if (stream.get() != 0) {\r\n                        throw new Error(\"BIT STRINGs with unused bits cannot encapsulate.\");\r\n                    }\r\n                }\r\n                sub = getSub();\r\n                for (var i = 0; i < sub.length; ++i) {\r\n                    if (sub[i].tag.isEOC()) {\r\n                        throw new Error(\"EOC is not supposed to be actual content.\");\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                // but silently ignore when they don't\r\n                sub = null;\r\n            }\r\n        }\r\n        if (sub === null) {\r\n            if (len === null) {\r\n                throw new Error(\"We can't skip over an invalid tag with undefined length at offset \" + start);\r\n            }\r\n            stream.pos = start + Math.abs(len);\r\n        }\r\n        return new ASN1(streamStart, header, len, tag, sub);\r\n    };\r\n    return ASN1;\r\n}());\r\n\r\nvar ASN1Tag = /** @class */ (function () {\r\n    function ASN1Tag(stream) {\r\n        var buf = stream.get();\r\n        this.tagClass = buf >> 6;\r\n        this.tagConstructed = ((buf & 0x20) !== 0);\r\n        this.tagNumber = buf & 0x1F;\r\n        if (this.tagNumber == 0x1F) { // long tag\r\n            var n = new _int10__WEBPACK_IMPORTED_MODULE_0__.Int10();\r\n            do {\r\n                buf = stream.get();\r\n                n.mulAdd(128, buf & 0x7F);\r\n            } while (buf & 0x80);\r\n            this.tagNumber = n.simplify();\r\n        }\r\n    }\r\n    ASN1Tag.prototype.isUniversal = function () {\r\n        return this.tagClass === 0x00;\r\n    };\r\n    ASN1Tag.prototype.isEOC = function () {\r\n        return this.tagClass === 0x00 && this.tagNumber === 0x00;\r\n    };\r\n    return ASN1Tag;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/asn1js/asn1.js?");

/***/ }),

/***/ "./lib/lib/asn1js/base64.js":
/*!**********************************!*\
  !*** ./lib/lib/asn1js/base64.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Base64\": () => (/* binding */ Base64)\n/* harmony export */ });\n// Base64 JavaScript decoder\r\n// Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>\r\n// Permission to use, copy, modify, and/or distribute this software for any\r\n// purpose with or without fee is hereby granted, provided that the above\r\n// copyright notice and this permission notice appear in all copies.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\r\nvar decoder;\r\nvar Base64 = {\r\n    decode: function (a) {\r\n        var i;\r\n        if (decoder === undefined) {\r\n            var b64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n            var ignore = \"= \\f\\n\\r\\t\\u00A0\\u2028\\u2029\";\r\n            decoder = Object.create(null);\r\n            for (i = 0; i < 64; ++i) {\r\n                decoder[b64.charAt(i)] = i;\r\n            }\r\n            decoder['-'] = 62; //+\r\n            decoder['_'] = 63; //-\r\n            for (i = 0; i < ignore.length; ++i) {\r\n                decoder[ignore.charAt(i)] = -1;\r\n            }\r\n        }\r\n        var out = [];\r\n        var bits = 0;\r\n        var char_count = 0;\r\n        for (i = 0; i < a.length; ++i) {\r\n            var c = a.charAt(i);\r\n            if (c == \"=\") {\r\n                break;\r\n            }\r\n            c = decoder[c];\r\n            if (c == -1) {\r\n                continue;\r\n            }\r\n            if (c === undefined) {\r\n                throw new Error(\"Illegal character at offset \" + i);\r\n            }\r\n            bits |= c;\r\n            if (++char_count >= 4) {\r\n                out[out.length] = (bits >> 16);\r\n                out[out.length] = (bits >> 8) & 0xFF;\r\n                out[out.length] = bits & 0xFF;\r\n                bits = 0;\r\n                char_count = 0;\r\n            }\r\n            else {\r\n                bits <<= 6;\r\n            }\r\n        }\r\n        switch (char_count) {\r\n            case 1:\r\n                throw new Error(\"Base64 encoding incomplete: at least 2 bits missing\");\r\n            case 2:\r\n                out[out.length] = (bits >> 10);\r\n                break;\r\n            case 3:\r\n                out[out.length] = (bits >> 16);\r\n                out[out.length] = (bits >> 8) & 0xFF;\r\n                break;\r\n        }\r\n        return out;\r\n    },\r\n    re: /-----BEGIN [^-]+-----([A-Za-z0-9+\\/=\\s]+)-----END [^-]+-----|begin-base64[^\\n]+\\n([A-Za-z0-9+\\/=\\s]+)====/,\r\n    unarmor: function (a) {\r\n        var m = Base64.re.exec(a);\r\n        if (m) {\r\n            if (m[1]) {\r\n                a = m[1];\r\n            }\r\n            else if (m[2]) {\r\n                a = m[2];\r\n            }\r\n            else {\r\n                throw new Error(\"RegExp out of sync\");\r\n            }\r\n        }\r\n        return Base64.decode(a);\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/asn1js/base64.js?");

/***/ }),

/***/ "./lib/lib/asn1js/hex.js":
/*!*******************************!*\
  !*** ./lib/lib/asn1js/hex.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Hex\": () => (/* binding */ Hex)\n/* harmony export */ });\n// Hex JavaScript decoder\r\n// Copyright (c) 2008-2013 Lapo Luchini <lapo@lapo.it>\r\n// Permission to use, copy, modify, and/or distribute this software for any\r\n// purpose with or without fee is hereby granted, provided that the above\r\n// copyright notice and this permission notice appear in all copies.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\r\nvar decoder;\r\nvar Hex = {\r\n    decode: function (a) {\r\n        var i;\r\n        if (decoder === undefined) {\r\n            var hex = \"0123456789ABCDEF\";\r\n            var ignore = \" \\f\\n\\r\\t\\u00A0\\u2028\\u2029\";\r\n            decoder = {};\r\n            for (i = 0; i < 16; ++i) {\r\n                decoder[hex.charAt(i)] = i;\r\n            }\r\n            hex = hex.toLowerCase();\r\n            for (i = 10; i < 16; ++i) {\r\n                decoder[hex.charAt(i)] = i;\r\n            }\r\n            for (i = 0; i < ignore.length; ++i) {\r\n                decoder[ignore.charAt(i)] = -1;\r\n            }\r\n        }\r\n        var out = [];\r\n        var bits = 0;\r\n        var char_count = 0;\r\n        for (i = 0; i < a.length; ++i) {\r\n            var c = a.charAt(i);\r\n            if (c == \"=\") {\r\n                break;\r\n            }\r\n            c = decoder[c];\r\n            if (c == -1) {\r\n                continue;\r\n            }\r\n            if (c === undefined) {\r\n                throw new Error(\"Illegal character at offset \" + i);\r\n            }\r\n            bits |= c;\r\n            if (++char_count >= 2) {\r\n                out[out.length] = bits;\r\n                bits = 0;\r\n                char_count = 0;\r\n            }\r\n            else {\r\n                bits <<= 4;\r\n            }\r\n        }\r\n        if (char_count) {\r\n            throw new Error(\"Hex encoding incomplete: 4 bits missing\");\r\n        }\r\n        return out;\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/asn1js/hex.js?");

/***/ }),

/***/ "./lib/lib/asn1js/int10.js":
/*!*********************************!*\
  !*** ./lib/lib/asn1js/int10.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Int10\": () => (/* binding */ Int10)\n/* harmony export */ });\n// Big integer base-10 printing library\r\n// Copyright (c) 2014 Lapo Luchini <lapo@lapo.it>\r\n// Permission to use, copy, modify, and/or distribute this software for any\r\n// purpose with or without fee is hereby granted, provided that the above\r\n// copyright notice and this permission notice appear in all copies.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\n// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\n// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\n// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\n// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\n// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\n// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n/*jshint browser: true, strict: true, immed: true, latedef: true, undef: true, regexdash: false */\r\nvar max = 10000000000000; // biggest integer that can still fit 2^53 when multiplied by 256\r\nvar Int10 = /** @class */ (function () {\r\n    function Int10(value) {\r\n        this.buf = [+value || 0];\r\n    }\r\n    Int10.prototype.mulAdd = function (m, c) {\r\n        // assert(m <= 256)\r\n        var b = this.buf;\r\n        var l = b.length;\r\n        var i;\r\n        var t;\r\n        for (i = 0; i < l; ++i) {\r\n            t = b[i] * m + c;\r\n            if (t < max) {\r\n                c = 0;\r\n            }\r\n            else {\r\n                c = 0 | (t / max);\r\n                t -= c * max;\r\n            }\r\n            b[i] = t;\r\n        }\r\n        if (c > 0) {\r\n            b[i] = c;\r\n        }\r\n    };\r\n    Int10.prototype.sub = function (c) {\r\n        // assert(m <= 256)\r\n        var b = this.buf;\r\n        var l = b.length;\r\n        var i;\r\n        var t;\r\n        for (i = 0; i < l; ++i) {\r\n            t = b[i] - c;\r\n            if (t < 0) {\r\n                t += max;\r\n                c = 1;\r\n            }\r\n            else {\r\n                c = 0;\r\n            }\r\n            b[i] = t;\r\n        }\r\n        while (b[b.length - 1] === 0) {\r\n            b.pop();\r\n        }\r\n    };\r\n    Int10.prototype.toString = function (base) {\r\n        if ((base || 10) != 10) {\r\n            throw new Error(\"only base 10 is supported\");\r\n        }\r\n        var b = this.buf;\r\n        var s = b[b.length - 1].toString();\r\n        for (var i = b.length - 2; i >= 0; --i) {\r\n            s += (max + b[i]).toString().substring(1);\r\n        }\r\n        return s;\r\n    };\r\n    Int10.prototype.valueOf = function () {\r\n        var b = this.buf;\r\n        var v = 0;\r\n        for (var i = b.length - 1; i >= 0; --i) {\r\n            v = v * max + b[i];\r\n        }\r\n        return v;\r\n    };\r\n    Int10.prototype.simplify = function () {\r\n        var b = this.buf;\r\n        return (b.length == 1) ? b[0] : this;\r\n    };\r\n    return Int10;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/asn1js/int10.js?");

/***/ }),

/***/ "./lib/lib/jsbn/base64.js":
/*!********************************!*\
  !*** ./lib/lib/jsbn/base64.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"b64toBA\": () => (/* binding */ b64toBA),\n/* harmony export */   \"b64tohex\": () => (/* binding */ b64tohex),\n/* harmony export */   \"hex2b64\": () => (/* binding */ hex2b64)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"./lib/lib/jsbn/util.js\");\n\r\nvar b64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\nvar b64pad = \"=\";\r\nfunction hex2b64(h) {\r\n    var i;\r\n    var c;\r\n    var ret = \"\";\r\n    for (i = 0; i + 3 <= h.length; i += 3) {\r\n        c = parseInt(h.substring(i, i + 3), 16);\r\n        ret += b64map.charAt(c >> 6) + b64map.charAt(c & 63);\r\n    }\r\n    if (i + 1 == h.length) {\r\n        c = parseInt(h.substring(i, i + 1), 16);\r\n        ret += b64map.charAt(c << 2);\r\n    }\r\n    else if (i + 2 == h.length) {\r\n        c = parseInt(h.substring(i, i + 2), 16);\r\n        ret += b64map.charAt(c >> 2) + b64map.charAt((c & 3) << 4);\r\n    }\r\n    while ((ret.length & 3) > 0) {\r\n        ret += b64pad;\r\n    }\r\n    return ret;\r\n}\r\n// convert a base64 string to hex\r\nfunction b64tohex(s) {\r\n    var ret = \"\";\r\n    var i;\r\n    var k = 0; // b64 state, 0-3\r\n    var slop = 0;\r\n    for (i = 0; i < s.length; ++i) {\r\n        if (s.charAt(i) == b64pad) {\r\n            break;\r\n        }\r\n        var v = b64map.indexOf(s.charAt(i));\r\n        if (v < 0) {\r\n            continue;\r\n        }\r\n        if (k == 0) {\r\n            ret += (0,_util__WEBPACK_IMPORTED_MODULE_0__.int2char)(v >> 2);\r\n            slop = v & 3;\r\n            k = 1;\r\n        }\r\n        else if (k == 1) {\r\n            ret += (0,_util__WEBPACK_IMPORTED_MODULE_0__.int2char)((slop << 2) | (v >> 4));\r\n            slop = v & 0xf;\r\n            k = 2;\r\n        }\r\n        else if (k == 2) {\r\n            ret += (0,_util__WEBPACK_IMPORTED_MODULE_0__.int2char)(slop);\r\n            ret += (0,_util__WEBPACK_IMPORTED_MODULE_0__.int2char)(v >> 2);\r\n            slop = v & 3;\r\n            k = 3;\r\n        }\r\n        else {\r\n            ret += (0,_util__WEBPACK_IMPORTED_MODULE_0__.int2char)((slop << 2) | (v >> 4));\r\n            ret += (0,_util__WEBPACK_IMPORTED_MODULE_0__.int2char)(v & 0xf);\r\n            k = 0;\r\n        }\r\n    }\r\n    if (k == 1) {\r\n        ret += (0,_util__WEBPACK_IMPORTED_MODULE_0__.int2char)(slop << 2);\r\n    }\r\n    return ret;\r\n}\r\n// convert a base64 string to a byte/number array\r\nfunction b64toBA(s) {\r\n    // piggyback on b64tohex for now, optimize later\r\n    var h = b64tohex(s);\r\n    var i;\r\n    var a = [];\r\n    for (i = 0; 2 * i < h.length; ++i) {\r\n        a[i] = parseInt(h.substring(2 * i, 2 * i + 2), 16);\r\n    }\r\n    return a;\r\n}\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/jsbn/base64.js?");

/***/ }),

/***/ "./lib/lib/jsbn/jsbn.js":
/*!******************************!*\
  !*** ./lib/lib/jsbn/jsbn.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BigInteger\": () => (/* binding */ BigInteger),\n/* harmony export */   \"intAt\": () => (/* binding */ intAt),\n/* harmony export */   \"nbi\": () => (/* binding */ nbi),\n/* harmony export */   \"nbits\": () => (/* binding */ nbits),\n/* harmony export */   \"nbv\": () => (/* binding */ nbv),\n/* harmony export */   \"parseBigInt\": () => (/* binding */ parseBigInt)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"./lib/lib/jsbn/util.js\");\n// Copyright (c) 2005  Tom Wu\r\n// All Rights Reserved.\r\n// See \"LICENSE\" for details.\r\n// Basic JavaScript BN library - subset useful for RSA encryption.\r\n\r\n// Bits per digit\r\nvar dbits;\r\n// JavaScript engine analysis\r\nvar canary = 0xdeadbeefcafe;\r\nvar j_lm = ((canary & 0xffffff) == 0xefcafe);\r\n//#region\r\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\r\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\r\n//#endregion\r\n// (public) Constructor\r\nvar BigInteger = /** @class */ (function () {\r\n    function BigInteger(a, b, c) {\r\n        if (a != null) {\r\n            if (\"number\" == typeof a) {\r\n                this.fromNumber(a, b, c);\r\n            }\r\n            else if (b == null && \"string\" != typeof a) {\r\n                this.fromString(a, 256);\r\n            }\r\n            else {\r\n                this.fromString(a, b);\r\n            }\r\n        }\r\n    }\r\n    //#region PUBLIC\r\n    // BigInteger.prototype.toString = bnToString;\r\n    // (public) return string representation in given radix\r\n    BigInteger.prototype.toString = function (b) {\r\n        if (this.s < 0) {\r\n            return \"-\" + this.negate().toString(b);\r\n        }\r\n        var k;\r\n        if (b == 16) {\r\n            k = 4;\r\n        }\r\n        else if (b == 8) {\r\n            k = 3;\r\n        }\r\n        else if (b == 2) {\r\n            k = 1;\r\n        }\r\n        else if (b == 32) {\r\n            k = 5;\r\n        }\r\n        else if (b == 4) {\r\n            k = 2;\r\n        }\r\n        else {\r\n            return this.toRadix(b);\r\n        }\r\n        var km = (1 << k) - 1;\r\n        var d;\r\n        var m = false;\r\n        var r = \"\";\r\n        var i = this.t;\r\n        var p = this.DB - (i * this.DB) % k;\r\n        if (i-- > 0) {\r\n            if (p < this.DB && (d = this[i] >> p) > 0) {\r\n                m = true;\r\n                r = (0,_util__WEBPACK_IMPORTED_MODULE_0__.int2char)(d);\r\n            }\r\n            while (i >= 0) {\r\n                if (p < k) {\r\n                    d = (this[i] & ((1 << p) - 1)) << (k - p);\r\n                    d |= this[--i] >> (p += this.DB - k);\r\n                }\r\n                else {\r\n                    d = (this[i] >> (p -= k)) & km;\r\n                    if (p <= 0) {\r\n                        p += this.DB;\r\n                        --i;\r\n                    }\r\n                }\r\n                if (d > 0) {\r\n                    m = true;\r\n                }\r\n                if (m) {\r\n                    r += (0,_util__WEBPACK_IMPORTED_MODULE_0__.int2char)(d);\r\n                }\r\n            }\r\n        }\r\n        return m ? r : \"0\";\r\n    };\r\n    // BigInteger.prototype.negate = bnNegate;\r\n    // (public) -this\r\n    BigInteger.prototype.negate = function () {\r\n        var r = nbi();\r\n        BigInteger.ZERO.subTo(this, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.abs = bnAbs;\r\n    // (public) |this|\r\n    BigInteger.prototype.abs = function () {\r\n        return (this.s < 0) ? this.negate() : this;\r\n    };\r\n    // BigInteger.prototype.compareTo = bnCompareTo;\r\n    // (public) return + if this > a, - if this < a, 0 if equal\r\n    BigInteger.prototype.compareTo = function (a) {\r\n        var r = this.s - a.s;\r\n        if (r != 0) {\r\n            return r;\r\n        }\r\n        var i = this.t;\r\n        r = i - a.t;\r\n        if (r != 0) {\r\n            return (this.s < 0) ? -r : r;\r\n        }\r\n        while (--i >= 0) {\r\n            if ((r = this[i] - a[i]) != 0) {\r\n                return r;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    // BigInteger.prototype.bitLength = bnBitLength;\r\n    // (public) return the number of bits in \"this\"\r\n    BigInteger.prototype.bitLength = function () {\r\n        if (this.t <= 0) {\r\n            return 0;\r\n        }\r\n        return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\r\n    };\r\n    // BigInteger.prototype.mod = bnMod;\r\n    // (public) this mod a\r\n    BigInteger.prototype.mod = function (a) {\r\n        var r = nbi();\r\n        this.abs().divRemTo(a, null, r);\r\n        if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\r\n            a.subTo(r, r);\r\n        }\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.modPowInt = bnModPowInt;\r\n    // (public) this^e % m, 0 <= e < 2^32\r\n    BigInteger.prototype.modPowInt = function (e, m) {\r\n        var z;\r\n        if (e < 256 || m.isEven()) {\r\n            z = new Classic(m);\r\n        }\r\n        else {\r\n            z = new Montgomery(m);\r\n        }\r\n        return this.exp(e, z);\r\n    };\r\n    // BigInteger.prototype.clone = bnClone;\r\n    // (public)\r\n    BigInteger.prototype.clone = function () {\r\n        var r = nbi();\r\n        this.copyTo(r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.intValue = bnIntValue;\r\n    // (public) return value as integer\r\n    BigInteger.prototype.intValue = function () {\r\n        if (this.s < 0) {\r\n            if (this.t == 1) {\r\n                return this[0] - this.DV;\r\n            }\r\n            else if (this.t == 0) {\r\n                return -1;\r\n            }\r\n        }\r\n        else if (this.t == 1) {\r\n            return this[0];\r\n        }\r\n        else if (this.t == 0) {\r\n            return 0;\r\n        }\r\n        // assumes 16 < DB < 32\r\n        return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\r\n    };\r\n    // BigInteger.prototype.byteValue = bnByteValue;\r\n    // (public) return value as byte\r\n    BigInteger.prototype.byteValue = function () {\r\n        return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\r\n    };\r\n    // BigInteger.prototype.shortValue = bnShortValue;\r\n    // (public) return value as short (assumes DB>=16)\r\n    BigInteger.prototype.shortValue = function () {\r\n        return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\r\n    };\r\n    // BigInteger.prototype.signum = bnSigNum;\r\n    // (public) 0 if this == 0, 1 if this > 0\r\n    BigInteger.prototype.signum = function () {\r\n        if (this.s < 0) {\r\n            return -1;\r\n        }\r\n        else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) {\r\n            return 0;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    };\r\n    // BigInteger.prototype.toByteArray = bnToByteArray;\r\n    // (public) convert to bigendian byte array\r\n    BigInteger.prototype.toByteArray = function () {\r\n        var i = this.t;\r\n        var r = [];\r\n        r[0] = this.s;\r\n        var p = this.DB - (i * this.DB) % 8;\r\n        var d;\r\n        var k = 0;\r\n        if (i-- > 0) {\r\n            if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) {\r\n                r[k++] = d | (this.s << (this.DB - p));\r\n            }\r\n            while (i >= 0) {\r\n                if (p < 8) {\r\n                    d = (this[i] & ((1 << p) - 1)) << (8 - p);\r\n                    d |= this[--i] >> (p += this.DB - 8);\r\n                }\r\n                else {\r\n                    d = (this[i] >> (p -= 8)) & 0xff;\r\n                    if (p <= 0) {\r\n                        p += this.DB;\r\n                        --i;\r\n                    }\r\n                }\r\n                if ((d & 0x80) != 0) {\r\n                    d |= -256;\r\n                }\r\n                if (k == 0 && (this.s & 0x80) != (d & 0x80)) {\r\n                    ++k;\r\n                }\r\n                if (k > 0 || d != this.s) {\r\n                    r[k++] = d;\r\n                }\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.equals = bnEquals;\r\n    BigInteger.prototype.equals = function (a) {\r\n        return (this.compareTo(a) == 0);\r\n    };\r\n    // BigInteger.prototype.min = bnMin;\r\n    BigInteger.prototype.min = function (a) {\r\n        return (this.compareTo(a) < 0) ? this : a;\r\n    };\r\n    // BigInteger.prototype.max = bnMax;\r\n    BigInteger.prototype.max = function (a) {\r\n        return (this.compareTo(a) > 0) ? this : a;\r\n    };\r\n    // BigInteger.prototype.and = bnAnd;\r\n    BigInteger.prototype.and = function (a) {\r\n        var r = nbi();\r\n        this.bitwiseTo(a, _util__WEBPACK_IMPORTED_MODULE_0__.op_and, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.or = bnOr;\r\n    BigInteger.prototype.or = function (a) {\r\n        var r = nbi();\r\n        this.bitwiseTo(a, _util__WEBPACK_IMPORTED_MODULE_0__.op_or, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.xor = bnXor;\r\n    BigInteger.prototype.xor = function (a) {\r\n        var r = nbi();\r\n        this.bitwiseTo(a, _util__WEBPACK_IMPORTED_MODULE_0__.op_xor, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.andNot = bnAndNot;\r\n    BigInteger.prototype.andNot = function (a) {\r\n        var r = nbi();\r\n        this.bitwiseTo(a, _util__WEBPACK_IMPORTED_MODULE_0__.op_andnot, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.not = bnNot;\r\n    // (public) ~this\r\n    BigInteger.prototype.not = function () {\r\n        var r = nbi();\r\n        for (var i = 0; i < this.t; ++i) {\r\n            r[i] = this.DM & ~this[i];\r\n        }\r\n        r.t = this.t;\r\n        r.s = ~this.s;\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.shiftLeft = bnShiftLeft;\r\n    // (public) this << n\r\n    BigInteger.prototype.shiftLeft = function (n) {\r\n        var r = nbi();\r\n        if (n < 0) {\r\n            this.rShiftTo(-n, r);\r\n        }\r\n        else {\r\n            this.lShiftTo(n, r);\r\n        }\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.shiftRight = bnShiftRight;\r\n    // (public) this >> n\r\n    BigInteger.prototype.shiftRight = function (n) {\r\n        var r = nbi();\r\n        if (n < 0) {\r\n            this.lShiftTo(-n, r);\r\n        }\r\n        else {\r\n            this.rShiftTo(n, r);\r\n        }\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\r\n    // (public) returns index of lowest 1-bit (or -1 if none)\r\n    BigInteger.prototype.getLowestSetBit = function () {\r\n        for (var i = 0; i < this.t; ++i) {\r\n            if (this[i] != 0) {\r\n                return i * this.DB + (0,_util__WEBPACK_IMPORTED_MODULE_0__.lbit)(this[i]);\r\n            }\r\n        }\r\n        if (this.s < 0) {\r\n            return this.t * this.DB;\r\n        }\r\n        return -1;\r\n    };\r\n    // BigInteger.prototype.bitCount = bnBitCount;\r\n    // (public) return number of set bits\r\n    BigInteger.prototype.bitCount = function () {\r\n        var r = 0;\r\n        var x = this.s & this.DM;\r\n        for (var i = 0; i < this.t; ++i) {\r\n            r += (0,_util__WEBPACK_IMPORTED_MODULE_0__.cbit)(this[i] ^ x);\r\n        }\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.testBit = bnTestBit;\r\n    // (public) true iff nth bit is set\r\n    BigInteger.prototype.testBit = function (n) {\r\n        var j = Math.floor(n / this.DB);\r\n        if (j >= this.t) {\r\n            return (this.s != 0);\r\n        }\r\n        return ((this[j] & (1 << (n % this.DB))) != 0);\r\n    };\r\n    // BigInteger.prototype.setBit = bnSetBit;\r\n    // (public) this | (1<<n)\r\n    BigInteger.prototype.setBit = function (n) {\r\n        return this.changeBit(n, _util__WEBPACK_IMPORTED_MODULE_0__.op_or);\r\n    };\r\n    // BigInteger.prototype.clearBit = bnClearBit;\r\n    // (public) this & ~(1<<n)\r\n    BigInteger.prototype.clearBit = function (n) {\r\n        return this.changeBit(n, _util__WEBPACK_IMPORTED_MODULE_0__.op_andnot);\r\n    };\r\n    // BigInteger.prototype.flipBit = bnFlipBit;\r\n    // (public) this ^ (1<<n)\r\n    BigInteger.prototype.flipBit = function (n) {\r\n        return this.changeBit(n, _util__WEBPACK_IMPORTED_MODULE_0__.op_xor);\r\n    };\r\n    // BigInteger.prototype.add = bnAdd;\r\n    // (public) this + a\r\n    BigInteger.prototype.add = function (a) {\r\n        var r = nbi();\r\n        this.addTo(a, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.subtract = bnSubtract;\r\n    // (public) this - a\r\n    BigInteger.prototype.subtract = function (a) {\r\n        var r = nbi();\r\n        this.subTo(a, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.multiply = bnMultiply;\r\n    // (public) this * a\r\n    BigInteger.prototype.multiply = function (a) {\r\n        var r = nbi();\r\n        this.multiplyTo(a, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.divide = bnDivide;\r\n    // (public) this / a\r\n    BigInteger.prototype.divide = function (a) {\r\n        var r = nbi();\r\n        this.divRemTo(a, r, null);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.remainder = bnRemainder;\r\n    // (public) this % a\r\n    BigInteger.prototype.remainder = function (a) {\r\n        var r = nbi();\r\n        this.divRemTo(a, null, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\r\n    // (public) [this/a,this%a]\r\n    BigInteger.prototype.divideAndRemainder = function (a) {\r\n        var q = nbi();\r\n        var r = nbi();\r\n        this.divRemTo(a, q, r);\r\n        return [q, r];\r\n    };\r\n    // BigInteger.prototype.modPow = bnModPow;\r\n    // (public) this^e % m (HAC 14.85)\r\n    BigInteger.prototype.modPow = function (e, m) {\r\n        var i = e.bitLength();\r\n        var k;\r\n        var r = nbv(1);\r\n        var z;\r\n        if (i <= 0) {\r\n            return r;\r\n        }\r\n        else if (i < 18) {\r\n            k = 1;\r\n        }\r\n        else if (i < 48) {\r\n            k = 3;\r\n        }\r\n        else if (i < 144) {\r\n            k = 4;\r\n        }\r\n        else if (i < 768) {\r\n            k = 5;\r\n        }\r\n        else {\r\n            k = 6;\r\n        }\r\n        if (i < 8) {\r\n            z = new Classic(m);\r\n        }\r\n        else if (m.isEven()) {\r\n            z = new Barrett(m);\r\n        }\r\n        else {\r\n            z = new Montgomery(m);\r\n        }\r\n        // precomputation\r\n        var g = [];\r\n        var n = 3;\r\n        var k1 = k - 1;\r\n        var km = (1 << k) - 1;\r\n        g[1] = z.convert(this);\r\n        if (k > 1) {\r\n            var g2 = nbi();\r\n            z.sqrTo(g[1], g2);\r\n            while (n <= km) {\r\n                g[n] = nbi();\r\n                z.mulTo(g2, g[n - 2], g[n]);\r\n                n += 2;\r\n            }\r\n        }\r\n        var j = e.t - 1;\r\n        var w;\r\n        var is1 = true;\r\n        var r2 = nbi();\r\n        var t;\r\n        i = nbits(e[j]) - 1;\r\n        while (j >= 0) {\r\n            if (i >= k1) {\r\n                w = (e[j] >> (i - k1)) & km;\r\n            }\r\n            else {\r\n                w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\r\n                if (j > 0) {\r\n                    w |= e[j - 1] >> (this.DB + i - k1);\r\n                }\r\n            }\r\n            n = k;\r\n            while ((w & 1) == 0) {\r\n                w >>= 1;\r\n                --n;\r\n            }\r\n            if ((i -= n) < 0) {\r\n                i += this.DB;\r\n                --j;\r\n            }\r\n            if (is1) { // ret == 1, don't bother squaring or multiplying it\r\n                g[w].copyTo(r);\r\n                is1 = false;\r\n            }\r\n            else {\r\n                while (n > 1) {\r\n                    z.sqrTo(r, r2);\r\n                    z.sqrTo(r2, r);\r\n                    n -= 2;\r\n                }\r\n                if (n > 0) {\r\n                    z.sqrTo(r, r2);\r\n                }\r\n                else {\r\n                    t = r;\r\n                    r = r2;\r\n                    r2 = t;\r\n                }\r\n                z.mulTo(r2, g[w], r);\r\n            }\r\n            while (j >= 0 && (e[j] & (1 << i)) == 0) {\r\n                z.sqrTo(r, r2);\r\n                t = r;\r\n                r = r2;\r\n                r2 = t;\r\n                if (--i < 0) {\r\n                    i = this.DB - 1;\r\n                    --j;\r\n                }\r\n            }\r\n        }\r\n        return z.revert(r);\r\n    };\r\n    // BigInteger.prototype.modInverse = bnModInverse;\r\n    // (public) 1/this % m (HAC 14.61)\r\n    BigInteger.prototype.modInverse = function (m) {\r\n        var ac = m.isEven();\r\n        if ((this.isEven() && ac) || m.signum() == 0) {\r\n            return BigInteger.ZERO;\r\n        }\r\n        var u = m.clone();\r\n        var v = this.clone();\r\n        var a = nbv(1);\r\n        var b = nbv(0);\r\n        var c = nbv(0);\r\n        var d = nbv(1);\r\n        while (u.signum() != 0) {\r\n            while (u.isEven()) {\r\n                u.rShiftTo(1, u);\r\n                if (ac) {\r\n                    if (!a.isEven() || !b.isEven()) {\r\n                        a.addTo(this, a);\r\n                        b.subTo(m, b);\r\n                    }\r\n                    a.rShiftTo(1, a);\r\n                }\r\n                else if (!b.isEven()) {\r\n                    b.subTo(m, b);\r\n                }\r\n                b.rShiftTo(1, b);\r\n            }\r\n            while (v.isEven()) {\r\n                v.rShiftTo(1, v);\r\n                if (ac) {\r\n                    if (!c.isEven() || !d.isEven()) {\r\n                        c.addTo(this, c);\r\n                        d.subTo(m, d);\r\n                    }\r\n                    c.rShiftTo(1, c);\r\n                }\r\n                else if (!d.isEven()) {\r\n                    d.subTo(m, d);\r\n                }\r\n                d.rShiftTo(1, d);\r\n            }\r\n            if (u.compareTo(v) >= 0) {\r\n                u.subTo(v, u);\r\n                if (ac) {\r\n                    a.subTo(c, a);\r\n                }\r\n                b.subTo(d, b);\r\n            }\r\n            else {\r\n                v.subTo(u, v);\r\n                if (ac) {\r\n                    c.subTo(a, c);\r\n                }\r\n                d.subTo(b, d);\r\n            }\r\n        }\r\n        if (v.compareTo(BigInteger.ONE) != 0) {\r\n            return BigInteger.ZERO;\r\n        }\r\n        if (d.compareTo(m) >= 0) {\r\n            return d.subtract(m);\r\n        }\r\n        if (d.signum() < 0) {\r\n            d.addTo(m, d);\r\n        }\r\n        else {\r\n            return d;\r\n        }\r\n        if (d.signum() < 0) {\r\n            return d.add(m);\r\n        }\r\n        else {\r\n            return d;\r\n        }\r\n    };\r\n    // BigInteger.prototype.pow = bnPow;\r\n    // (public) this^e\r\n    BigInteger.prototype.pow = function (e) {\r\n        return this.exp(e, new NullExp());\r\n    };\r\n    // BigInteger.prototype.gcd = bnGCD;\r\n    // (public) gcd(this,a) (HAC 14.54)\r\n    BigInteger.prototype.gcd = function (a) {\r\n        var x = (this.s < 0) ? this.negate() : this.clone();\r\n        var y = (a.s < 0) ? a.negate() : a.clone();\r\n        if (x.compareTo(y) < 0) {\r\n            var t = x;\r\n            x = y;\r\n            y = t;\r\n        }\r\n        var i = x.getLowestSetBit();\r\n        var g = y.getLowestSetBit();\r\n        if (g < 0) {\r\n            return x;\r\n        }\r\n        if (i < g) {\r\n            g = i;\r\n        }\r\n        if (g > 0) {\r\n            x.rShiftTo(g, x);\r\n            y.rShiftTo(g, y);\r\n        }\r\n        while (x.signum() > 0) {\r\n            if ((i = x.getLowestSetBit()) > 0) {\r\n                x.rShiftTo(i, x);\r\n            }\r\n            if ((i = y.getLowestSetBit()) > 0) {\r\n                y.rShiftTo(i, y);\r\n            }\r\n            if (x.compareTo(y) >= 0) {\r\n                x.subTo(y, x);\r\n                x.rShiftTo(1, x);\r\n            }\r\n            else {\r\n                y.subTo(x, y);\r\n                y.rShiftTo(1, y);\r\n            }\r\n        }\r\n        if (g > 0) {\r\n            y.lShiftTo(g, y);\r\n        }\r\n        return y;\r\n    };\r\n    // BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\r\n    // (public) test primality with certainty >= 1-.5^t\r\n    BigInteger.prototype.isProbablePrime = function (t) {\r\n        var i;\r\n        var x = this.abs();\r\n        if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\r\n            for (i = 0; i < lowprimes.length; ++i) {\r\n                if (x[0] == lowprimes[i]) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        if (x.isEven()) {\r\n            return false;\r\n        }\r\n        i = 1;\r\n        while (i < lowprimes.length) {\r\n            var m = lowprimes[i];\r\n            var j = i + 1;\r\n            while (j < lowprimes.length && m < lplim) {\r\n                m *= lowprimes[j++];\r\n            }\r\n            m = x.modInt(m);\r\n            while (i < j) {\r\n                if (m % lowprimes[i++] == 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return x.millerRabin(t);\r\n    };\r\n    //#endregion PUBLIC\r\n    //#region PROTECTED\r\n    // BigInteger.prototype.copyTo = bnpCopyTo;\r\n    // (protected) copy this to r\r\n    BigInteger.prototype.copyTo = function (r) {\r\n        for (var i = this.t - 1; i >= 0; --i) {\r\n            r[i] = this[i];\r\n        }\r\n        r.t = this.t;\r\n        r.s = this.s;\r\n    };\r\n    // BigInteger.prototype.fromInt = bnpFromInt;\r\n    // (protected) set from integer value x, -DV <= x < DV\r\n    BigInteger.prototype.fromInt = function (x) {\r\n        this.t = 1;\r\n        this.s = (x < 0) ? -1 : 0;\r\n        if (x > 0) {\r\n            this[0] = x;\r\n        }\r\n        else if (x < -1) {\r\n            this[0] = x + this.DV;\r\n        }\r\n        else {\r\n            this.t = 0;\r\n        }\r\n    };\r\n    // BigInteger.prototype.fromString = bnpFromString;\r\n    // (protected) set from string and radix\r\n    BigInteger.prototype.fromString = function (s, b) {\r\n        var k;\r\n        if (b == 16) {\r\n            k = 4;\r\n        }\r\n        else if (b == 8) {\r\n            k = 3;\r\n        }\r\n        else if (b == 256) {\r\n            k = 8;\r\n            /* byte array */\r\n        }\r\n        else if (b == 2) {\r\n            k = 1;\r\n        }\r\n        else if (b == 32) {\r\n            k = 5;\r\n        }\r\n        else if (b == 4) {\r\n            k = 2;\r\n        }\r\n        else {\r\n            this.fromRadix(s, b);\r\n            return;\r\n        }\r\n        this.t = 0;\r\n        this.s = 0;\r\n        var i = s.length;\r\n        var mi = false;\r\n        var sh = 0;\r\n        while (--i >= 0) {\r\n            var x = (k == 8) ? (+s[i]) & 0xff : intAt(s, i);\r\n            if (x < 0) {\r\n                if (s.charAt(i) == \"-\") {\r\n                    mi = true;\r\n                }\r\n                continue;\r\n            }\r\n            mi = false;\r\n            if (sh == 0) {\r\n                this[this.t++] = x;\r\n            }\r\n            else if (sh + k > this.DB) {\r\n                this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\r\n                this[this.t++] = (x >> (this.DB - sh));\r\n            }\r\n            else {\r\n                this[this.t - 1] |= x << sh;\r\n            }\r\n            sh += k;\r\n            if (sh >= this.DB) {\r\n                sh -= this.DB;\r\n            }\r\n        }\r\n        if (k == 8 && ((+s[0]) & 0x80) != 0) {\r\n            this.s = -1;\r\n            if (sh > 0) {\r\n                this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\r\n            }\r\n        }\r\n        this.clamp();\r\n        if (mi) {\r\n            BigInteger.ZERO.subTo(this, this);\r\n        }\r\n    };\r\n    // BigInteger.prototype.clamp = bnpClamp;\r\n    // (protected) clamp off excess high words\r\n    BigInteger.prototype.clamp = function () {\r\n        var c = this.s & this.DM;\r\n        while (this.t > 0 && this[this.t - 1] == c) {\r\n            --this.t;\r\n        }\r\n    };\r\n    // BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\r\n    // (protected) r = this << n*DB\r\n    BigInteger.prototype.dlShiftTo = function (n, r) {\r\n        var i;\r\n        for (i = this.t - 1; i >= 0; --i) {\r\n            r[i + n] = this[i];\r\n        }\r\n        for (i = n - 1; i >= 0; --i) {\r\n            r[i] = 0;\r\n        }\r\n        r.t = this.t + n;\r\n        r.s = this.s;\r\n    };\r\n    // BigInteger.prototype.drShiftTo = bnpDRShiftTo;\r\n    // (protected) r = this >> n*DB\r\n    BigInteger.prototype.drShiftTo = function (n, r) {\r\n        for (var i = n; i < this.t; ++i) {\r\n            r[i - n] = this[i];\r\n        }\r\n        r.t = Math.max(this.t - n, 0);\r\n        r.s = this.s;\r\n    };\r\n    // BigInteger.prototype.lShiftTo = bnpLShiftTo;\r\n    // (protected) r = this << n\r\n    BigInteger.prototype.lShiftTo = function (n, r) {\r\n        var bs = n % this.DB;\r\n        var cbs = this.DB - bs;\r\n        var bm = (1 << cbs) - 1;\r\n        var ds = Math.floor(n / this.DB);\r\n        var c = (this.s << bs) & this.DM;\r\n        for (var i = this.t - 1; i >= 0; --i) {\r\n            r[i + ds + 1] = (this[i] >> cbs) | c;\r\n            c = (this[i] & bm) << bs;\r\n        }\r\n        for (var i = ds - 1; i >= 0; --i) {\r\n            r[i] = 0;\r\n        }\r\n        r[ds] = c;\r\n        r.t = this.t + ds + 1;\r\n        r.s = this.s;\r\n        r.clamp();\r\n    };\r\n    // BigInteger.prototype.rShiftTo = bnpRShiftTo;\r\n    // (protected) r = this >> n\r\n    BigInteger.prototype.rShiftTo = function (n, r) {\r\n        r.s = this.s;\r\n        var ds = Math.floor(n / this.DB);\r\n        if (ds >= this.t) {\r\n            r.t = 0;\r\n            return;\r\n        }\r\n        var bs = n % this.DB;\r\n        var cbs = this.DB - bs;\r\n        var bm = (1 << bs) - 1;\r\n        r[0] = this[ds] >> bs;\r\n        for (var i = ds + 1; i < this.t; ++i) {\r\n            r[i - ds - 1] |= (this[i] & bm) << cbs;\r\n            r[i - ds] = this[i] >> bs;\r\n        }\r\n        if (bs > 0) {\r\n            r[this.t - ds - 1] |= (this.s & bm) << cbs;\r\n        }\r\n        r.t = this.t - ds;\r\n        r.clamp();\r\n    };\r\n    // BigInteger.prototype.subTo = bnpSubTo;\r\n    // (protected) r = this - a\r\n    BigInteger.prototype.subTo = function (a, r) {\r\n        var i = 0;\r\n        var c = 0;\r\n        var m = Math.min(a.t, this.t);\r\n        while (i < m) {\r\n            c += this[i] - a[i];\r\n            r[i++] = c & this.DM;\r\n            c >>= this.DB;\r\n        }\r\n        if (a.t < this.t) {\r\n            c -= a.s;\r\n            while (i < this.t) {\r\n                c += this[i];\r\n                r[i++] = c & this.DM;\r\n                c >>= this.DB;\r\n            }\r\n            c += this.s;\r\n        }\r\n        else {\r\n            c += this.s;\r\n            while (i < a.t) {\r\n                c -= a[i];\r\n                r[i++] = c & this.DM;\r\n                c >>= this.DB;\r\n            }\r\n            c -= a.s;\r\n        }\r\n        r.s = (c < 0) ? -1 : 0;\r\n        if (c < -1) {\r\n            r[i++] = this.DV + c;\r\n        }\r\n        else if (c > 0) {\r\n            r[i++] = c;\r\n        }\r\n        r.t = i;\r\n        r.clamp();\r\n    };\r\n    // BigInteger.prototype.multiplyTo = bnpMultiplyTo;\r\n    // (protected) r = this * a, r != this,a (HAC 14.12)\r\n    // \"this\" should be the larger one if appropriate.\r\n    BigInteger.prototype.multiplyTo = function (a, r) {\r\n        var x = this.abs();\r\n        var y = a.abs();\r\n        var i = x.t;\r\n        r.t = i + y.t;\r\n        while (--i >= 0) {\r\n            r[i] = 0;\r\n        }\r\n        for (i = 0; i < y.t; ++i) {\r\n            r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\r\n        }\r\n        r.s = 0;\r\n        r.clamp();\r\n        if (this.s != a.s) {\r\n            BigInteger.ZERO.subTo(r, r);\r\n        }\r\n    };\r\n    // BigInteger.prototype.squareTo = bnpSquareTo;\r\n    // (protected) r = this^2, r != this (HAC 14.16)\r\n    BigInteger.prototype.squareTo = function (r) {\r\n        var x = this.abs();\r\n        var i = r.t = 2 * x.t;\r\n        while (--i >= 0) {\r\n            r[i] = 0;\r\n        }\r\n        for (i = 0; i < x.t - 1; ++i) {\r\n            var c = x.am(i, x[i], r, 2 * i, 0, 1);\r\n            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\r\n                r[i + x.t] -= x.DV;\r\n                r[i + x.t + 1] = 1;\r\n            }\r\n        }\r\n        if (r.t > 0) {\r\n            r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\r\n        }\r\n        r.s = 0;\r\n        r.clamp();\r\n    };\r\n    // BigInteger.prototype.divRemTo = bnpDivRemTo;\r\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\r\n    // r != q, this != m.  q or r may be null.\r\n    BigInteger.prototype.divRemTo = function (m, q, r) {\r\n        var pm = m.abs();\r\n        if (pm.t <= 0) {\r\n            return;\r\n        }\r\n        var pt = this.abs();\r\n        if (pt.t < pm.t) {\r\n            if (q != null) {\r\n                q.fromInt(0);\r\n            }\r\n            if (r != null) {\r\n                this.copyTo(r);\r\n            }\r\n            return;\r\n        }\r\n        if (r == null) {\r\n            r = nbi();\r\n        }\r\n        var y = nbi();\r\n        var ts = this.s;\r\n        var ms = m.s;\r\n        var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\r\n        if (nsh > 0) {\r\n            pm.lShiftTo(nsh, y);\r\n            pt.lShiftTo(nsh, r);\r\n        }\r\n        else {\r\n            pm.copyTo(y);\r\n            pt.copyTo(r);\r\n        }\r\n        var ys = y.t;\r\n        var y0 = y[ys - 1];\r\n        if (y0 == 0) {\r\n            return;\r\n        }\r\n        var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\r\n        var d1 = this.FV / yt;\r\n        var d2 = (1 << this.F1) / yt;\r\n        var e = 1 << this.F2;\r\n        var i = r.t;\r\n        var j = i - ys;\r\n        var t = (q == null) ? nbi() : q;\r\n        y.dlShiftTo(j, t);\r\n        if (r.compareTo(t) >= 0) {\r\n            r[r.t++] = 1;\r\n            r.subTo(t, r);\r\n        }\r\n        BigInteger.ONE.dlShiftTo(ys, t);\r\n        t.subTo(y, y); // \"negative\" y so we can replace sub with am later\r\n        while (y.t < ys) {\r\n            y[y.t++] = 0;\r\n        }\r\n        while (--j >= 0) {\r\n            // Estimate quotient digit\r\n            var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\r\n            if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out\r\n                y.dlShiftTo(j, t);\r\n                r.subTo(t, r);\r\n                while (r[i] < --qd) {\r\n                    r.subTo(t, r);\r\n                }\r\n            }\r\n        }\r\n        if (q != null) {\r\n            r.drShiftTo(ys, q);\r\n            if (ts != ms) {\r\n                BigInteger.ZERO.subTo(q, q);\r\n            }\r\n        }\r\n        r.t = ys;\r\n        r.clamp();\r\n        if (nsh > 0) {\r\n            r.rShiftTo(nsh, r);\r\n        } // Denormalize remainder\r\n        if (ts < 0) {\r\n            BigInteger.ZERO.subTo(r, r);\r\n        }\r\n    };\r\n    // BigInteger.prototype.invDigit = bnpInvDigit;\r\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\r\n    // justification:\r\n    //         xy == 1 (mod m)\r\n    //         xy =  1+km\r\n    //   xy(2-xy) = (1+km)(1-km)\r\n    // x[y(2-xy)] = 1-k^2m^2\r\n    // x[y(2-xy)] == 1 (mod m^2)\r\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\r\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\r\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\r\n    BigInteger.prototype.invDigit = function () {\r\n        if (this.t < 1) {\r\n            return 0;\r\n        }\r\n        var x = this[0];\r\n        if ((x & 1) == 0) {\r\n            return 0;\r\n        }\r\n        var y = x & 3; // y == 1/x mod 2^2\r\n        y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\r\n        y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\r\n        y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\r\n        // last step - calculate inverse mod DV directly;\r\n        // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\r\n        y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\r\n        // we really want the negative inverse, and -DV < y < DV\r\n        return (y > 0) ? this.DV - y : -y;\r\n    };\r\n    // BigInteger.prototype.isEven = bnpIsEven;\r\n    // (protected) true iff this is even\r\n    BigInteger.prototype.isEven = function () {\r\n        return ((this.t > 0) ? (this[0] & 1) : this.s) == 0;\r\n    };\r\n    // BigInteger.prototype.exp = bnpExp;\r\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\r\n    BigInteger.prototype.exp = function (e, z) {\r\n        if (e > 0xffffffff || e < 1) {\r\n            return BigInteger.ONE;\r\n        }\r\n        var r = nbi();\r\n        var r2 = nbi();\r\n        var g = z.convert(this);\r\n        var i = nbits(e) - 1;\r\n        g.copyTo(r);\r\n        while (--i >= 0) {\r\n            z.sqrTo(r, r2);\r\n            if ((e & (1 << i)) > 0) {\r\n                z.mulTo(r2, g, r);\r\n            }\r\n            else {\r\n                var t = r;\r\n                r = r2;\r\n                r2 = t;\r\n            }\r\n        }\r\n        return z.revert(r);\r\n    };\r\n    // BigInteger.prototype.chunkSize = bnpChunkSize;\r\n    // (protected) return x s.t. r^x < DV\r\n    BigInteger.prototype.chunkSize = function (r) {\r\n        return Math.floor(Math.LN2 * this.DB / Math.log(r));\r\n    };\r\n    // BigInteger.prototype.toRadix = bnpToRadix;\r\n    // (protected) convert to radix string\r\n    BigInteger.prototype.toRadix = function (b) {\r\n        if (b == null) {\r\n            b = 10;\r\n        }\r\n        if (this.signum() == 0 || b < 2 || b > 36) {\r\n            return \"0\";\r\n        }\r\n        var cs = this.chunkSize(b);\r\n        var a = Math.pow(b, cs);\r\n        var d = nbv(a);\r\n        var y = nbi();\r\n        var z = nbi();\r\n        var r = \"\";\r\n        this.divRemTo(d, y, z);\r\n        while (y.signum() > 0) {\r\n            r = (a + z.intValue()).toString(b).substr(1) + r;\r\n            y.divRemTo(d, y, z);\r\n        }\r\n        return z.intValue().toString(b) + r;\r\n    };\r\n    // BigInteger.prototype.fromRadix = bnpFromRadix;\r\n    // (protected) convert from radix string\r\n    BigInteger.prototype.fromRadix = function (s, b) {\r\n        this.fromInt(0);\r\n        if (b == null) {\r\n            b = 10;\r\n        }\r\n        var cs = this.chunkSize(b);\r\n        var d = Math.pow(b, cs);\r\n        var mi = false;\r\n        var j = 0;\r\n        var w = 0;\r\n        for (var i = 0; i < s.length; ++i) {\r\n            var x = intAt(s, i);\r\n            if (x < 0) {\r\n                if (s.charAt(i) == \"-\" && this.signum() == 0) {\r\n                    mi = true;\r\n                }\r\n                continue;\r\n            }\r\n            w = b * w + x;\r\n            if (++j >= cs) {\r\n                this.dMultiply(d);\r\n                this.dAddOffset(w, 0);\r\n                j = 0;\r\n                w = 0;\r\n            }\r\n        }\r\n        if (j > 0) {\r\n            this.dMultiply(Math.pow(b, j));\r\n            this.dAddOffset(w, 0);\r\n        }\r\n        if (mi) {\r\n            BigInteger.ZERO.subTo(this, this);\r\n        }\r\n    };\r\n    // BigInteger.prototype.fromNumber = bnpFromNumber;\r\n    // (protected) alternate constructor\r\n    BigInteger.prototype.fromNumber = function (a, b, c) {\r\n        if (\"number\" == typeof b) {\r\n            // new BigInteger(int,int,RNG)\r\n            if (a < 2) {\r\n                this.fromInt(1);\r\n            }\r\n            else {\r\n                this.fromNumber(a, c);\r\n                if (!this.testBit(a - 1)) {\r\n                    // force MSB set\r\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), _util__WEBPACK_IMPORTED_MODULE_0__.op_or, this);\r\n                }\r\n                if (this.isEven()) {\r\n                    this.dAddOffset(1, 0);\r\n                } // force odd\r\n                while (!this.isProbablePrime(b)) {\r\n                    this.dAddOffset(2, 0);\r\n                    if (this.bitLength() > a) {\r\n                        this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // new BigInteger(int,RNG)\r\n            var x = [];\r\n            var t = a & 7;\r\n            x.length = (a >> 3) + 1;\r\n            b.nextBytes(x);\r\n            if (t > 0) {\r\n                x[0] &= ((1 << t) - 1);\r\n            }\r\n            else {\r\n                x[0] = 0;\r\n            }\r\n            this.fromString(x, 256);\r\n        }\r\n    };\r\n    // BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\r\n    // (protected) r = this op a (bitwise)\r\n    BigInteger.prototype.bitwiseTo = function (a, op, r) {\r\n        var i;\r\n        var f;\r\n        var m = Math.min(a.t, this.t);\r\n        for (i = 0; i < m; ++i) {\r\n            r[i] = op(this[i], a[i]);\r\n        }\r\n        if (a.t < this.t) {\r\n            f = a.s & this.DM;\r\n            for (i = m; i < this.t; ++i) {\r\n                r[i] = op(this[i], f);\r\n            }\r\n            r.t = this.t;\r\n        }\r\n        else {\r\n            f = this.s & this.DM;\r\n            for (i = m; i < a.t; ++i) {\r\n                r[i] = op(f, a[i]);\r\n            }\r\n            r.t = a.t;\r\n        }\r\n        r.s = op(this.s, a.s);\r\n        r.clamp();\r\n    };\r\n    // BigInteger.prototype.changeBit = bnpChangeBit;\r\n    // (protected) this op (1<<n)\r\n    BigInteger.prototype.changeBit = function (n, op) {\r\n        var r = BigInteger.ONE.shiftLeft(n);\r\n        this.bitwiseTo(r, op, r);\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.addTo = bnpAddTo;\r\n    // (protected) r = this + a\r\n    BigInteger.prototype.addTo = function (a, r) {\r\n        var i = 0;\r\n        var c = 0;\r\n        var m = Math.min(a.t, this.t);\r\n        while (i < m) {\r\n            c += this[i] + a[i];\r\n            r[i++] = c & this.DM;\r\n            c >>= this.DB;\r\n        }\r\n        if (a.t < this.t) {\r\n            c += a.s;\r\n            while (i < this.t) {\r\n                c += this[i];\r\n                r[i++] = c & this.DM;\r\n                c >>= this.DB;\r\n            }\r\n            c += this.s;\r\n        }\r\n        else {\r\n            c += this.s;\r\n            while (i < a.t) {\r\n                c += a[i];\r\n                r[i++] = c & this.DM;\r\n                c >>= this.DB;\r\n            }\r\n            c += a.s;\r\n        }\r\n        r.s = (c < 0) ? -1 : 0;\r\n        if (c > 0) {\r\n            r[i++] = c;\r\n        }\r\n        else if (c < -1) {\r\n            r[i++] = this.DV + c;\r\n        }\r\n        r.t = i;\r\n        r.clamp();\r\n    };\r\n    // BigInteger.prototype.dMultiply = bnpDMultiply;\r\n    // (protected) this *= n, this >= 0, 1 < n < DV\r\n    BigInteger.prototype.dMultiply = function (n) {\r\n        this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\r\n        ++this.t;\r\n        this.clamp();\r\n    };\r\n    // BigInteger.prototype.dAddOffset = bnpDAddOffset;\r\n    // (protected) this += n << w words, this >= 0\r\n    BigInteger.prototype.dAddOffset = function (n, w) {\r\n        if (n == 0) {\r\n            return;\r\n        }\r\n        while (this.t <= w) {\r\n            this[this.t++] = 0;\r\n        }\r\n        this[w] += n;\r\n        while (this[w] >= this.DV) {\r\n            this[w] -= this.DV;\r\n            if (++w >= this.t) {\r\n                this[this.t++] = 0;\r\n            }\r\n            ++this[w];\r\n        }\r\n    };\r\n    // BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\r\n    // (protected) r = lower n words of \"this * a\", a.t <= n\r\n    // \"this\" should be the larger one if appropriate.\r\n    BigInteger.prototype.multiplyLowerTo = function (a, n, r) {\r\n        var i = Math.min(this.t + a.t, n);\r\n        r.s = 0; // assumes a,this >= 0\r\n        r.t = i;\r\n        while (i > 0) {\r\n            r[--i] = 0;\r\n        }\r\n        for (var j = r.t - this.t; i < j; ++i) {\r\n            r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\r\n        }\r\n        for (var j = Math.min(a.t, n); i < j; ++i) {\r\n            this.am(0, a[i], r, i, 0, n - i);\r\n        }\r\n        r.clamp();\r\n    };\r\n    // BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\r\n    // (protected) r = \"this * a\" without lower n words, n > 0\r\n    // \"this\" should be the larger one if appropriate.\r\n    BigInteger.prototype.multiplyUpperTo = function (a, n, r) {\r\n        --n;\r\n        var i = r.t = this.t + a.t - n;\r\n        r.s = 0; // assumes a,this >= 0\r\n        while (--i >= 0) {\r\n            r[i] = 0;\r\n        }\r\n        for (i = Math.max(n - this.t, 0); i < a.t; ++i) {\r\n            r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\r\n        }\r\n        r.clamp();\r\n        r.drShiftTo(1, r);\r\n    };\r\n    // BigInteger.prototype.modInt = bnpModInt;\r\n    // (protected) this % n, n < 2^26\r\n    BigInteger.prototype.modInt = function (n) {\r\n        if (n <= 0) {\r\n            return 0;\r\n        }\r\n        var d = this.DV % n;\r\n        var r = (this.s < 0) ? n - 1 : 0;\r\n        if (this.t > 0) {\r\n            if (d == 0) {\r\n                r = this[0] % n;\r\n            }\r\n            else {\r\n                for (var i = this.t - 1; i >= 0; --i) {\r\n                    r = (d * r + this[i]) % n;\r\n                }\r\n            }\r\n        }\r\n        return r;\r\n    };\r\n    // BigInteger.prototype.millerRabin = bnpMillerRabin;\r\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\r\n    BigInteger.prototype.millerRabin = function (t) {\r\n        var n1 = this.subtract(BigInteger.ONE);\r\n        var k = n1.getLowestSetBit();\r\n        if (k <= 0) {\r\n            return false;\r\n        }\r\n        var r = n1.shiftRight(k);\r\n        t = (t + 1) >> 1;\r\n        if (t > lowprimes.length) {\r\n            t = lowprimes.length;\r\n        }\r\n        var a = nbi();\r\n        for (var i = 0; i < t; ++i) {\r\n            // Pick bases at random, instead of starting at 2\r\n            a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\r\n            var y = a.modPow(r, this);\r\n            if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\r\n                var j = 1;\r\n                while (j++ < k && y.compareTo(n1) != 0) {\r\n                    y = y.modPowInt(2, this);\r\n                    if (y.compareTo(BigInteger.ONE) == 0) {\r\n                        return false;\r\n                    }\r\n                }\r\n                if (y.compareTo(n1) != 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    // BigInteger.prototype.square = bnSquare;\r\n    // (public) this^2\r\n    BigInteger.prototype.square = function () {\r\n        var r = nbi();\r\n        this.squareTo(r);\r\n        return r;\r\n    };\r\n    //#region ASYNC\r\n    // Public API method\r\n    BigInteger.prototype.gcda = function (a, callback) {\r\n        var x = (this.s < 0) ? this.negate() : this.clone();\r\n        var y = (a.s < 0) ? a.negate() : a.clone();\r\n        if (x.compareTo(y) < 0) {\r\n            var t = x;\r\n            x = y;\r\n            y = t;\r\n        }\r\n        var i = x.getLowestSetBit();\r\n        var g = y.getLowestSetBit();\r\n        if (g < 0) {\r\n            callback(x);\r\n            return;\r\n        }\r\n        if (i < g) {\r\n            g = i;\r\n        }\r\n        if (g > 0) {\r\n            x.rShiftTo(g, x);\r\n            y.rShiftTo(g, y);\r\n        }\r\n        // Workhorse of the algorithm, gets called 200 - 800 times per 512 bit keygen.\r\n        var gcda1 = function () {\r\n            if ((i = x.getLowestSetBit()) > 0) {\r\n                x.rShiftTo(i, x);\r\n            }\r\n            if ((i = y.getLowestSetBit()) > 0) {\r\n                y.rShiftTo(i, y);\r\n            }\r\n            if (x.compareTo(y) >= 0) {\r\n                x.subTo(y, x);\r\n                x.rShiftTo(1, x);\r\n            }\r\n            else {\r\n                y.subTo(x, y);\r\n                y.rShiftTo(1, y);\r\n            }\r\n            if (!(x.signum() > 0)) {\r\n                if (g > 0) {\r\n                    y.lShiftTo(g, y);\r\n                }\r\n                setTimeout(function () { callback(y); }, 0); // escape\r\n            }\r\n            else {\r\n                setTimeout(gcda1, 0);\r\n            }\r\n        };\r\n        setTimeout(gcda1, 10);\r\n    };\r\n    // (protected) alternate constructor\r\n    BigInteger.prototype.fromNumberAsync = function (a, b, c, callback) {\r\n        if (\"number\" == typeof b) {\r\n            if (a < 2) {\r\n                this.fromInt(1);\r\n            }\r\n            else {\r\n                this.fromNumber(a, c);\r\n                if (!this.testBit(a - 1)) {\r\n                    this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), _util__WEBPACK_IMPORTED_MODULE_0__.op_or, this);\r\n                }\r\n                if (this.isEven()) {\r\n                    this.dAddOffset(1, 0);\r\n                }\r\n                var bnp_1 = this;\r\n                var bnpfn1_1 = function () {\r\n                    bnp_1.dAddOffset(2, 0);\r\n                    if (bnp_1.bitLength() > a) {\r\n                        bnp_1.subTo(BigInteger.ONE.shiftLeft(a - 1), bnp_1);\r\n                    }\r\n                    if (bnp_1.isProbablePrime(b)) {\r\n                        setTimeout(function () { callback(); }, 0); // escape\r\n                    }\r\n                    else {\r\n                        setTimeout(bnpfn1_1, 0);\r\n                    }\r\n                };\r\n                setTimeout(bnpfn1_1, 0);\r\n            }\r\n        }\r\n        else {\r\n            var x = [];\r\n            var t = a & 7;\r\n            x.length = (a >> 3) + 1;\r\n            b.nextBytes(x);\r\n            if (t > 0) {\r\n                x[0] &= ((1 << t) - 1);\r\n            }\r\n            else {\r\n                x[0] = 0;\r\n            }\r\n            this.fromString(x, 256);\r\n        }\r\n    };\r\n    return BigInteger;\r\n}());\r\n\r\n//#region REDUCERS\r\n//#region NullExp\r\nvar NullExp = /** @class */ (function () {\r\n    function NullExp() {\r\n    }\r\n    // NullExp.prototype.convert = nNop;\r\n    NullExp.prototype.convert = function (x) {\r\n        return x;\r\n    };\r\n    // NullExp.prototype.revert = nNop;\r\n    NullExp.prototype.revert = function (x) {\r\n        return x;\r\n    };\r\n    // NullExp.prototype.mulTo = nMulTo;\r\n    NullExp.prototype.mulTo = function (x, y, r) {\r\n        x.multiplyTo(y, r);\r\n    };\r\n    // NullExp.prototype.sqrTo = nSqrTo;\r\n    NullExp.prototype.sqrTo = function (x, r) {\r\n        x.squareTo(r);\r\n    };\r\n    return NullExp;\r\n}());\r\n// Modular reduction using \"classic\" algorithm\r\nvar Classic = /** @class */ (function () {\r\n    function Classic(m) {\r\n        this.m = m;\r\n    }\r\n    // Classic.prototype.convert = cConvert;\r\n    Classic.prototype.convert = function (x) {\r\n        if (x.s < 0 || x.compareTo(this.m) >= 0) {\r\n            return x.mod(this.m);\r\n        }\r\n        else {\r\n            return x;\r\n        }\r\n    };\r\n    // Classic.prototype.revert = cRevert;\r\n    Classic.prototype.revert = function (x) {\r\n        return x;\r\n    };\r\n    // Classic.prototype.reduce = cReduce;\r\n    Classic.prototype.reduce = function (x) {\r\n        x.divRemTo(this.m, null, x);\r\n    };\r\n    // Classic.prototype.mulTo = cMulTo;\r\n    Classic.prototype.mulTo = function (x, y, r) {\r\n        x.multiplyTo(y, r);\r\n        this.reduce(r);\r\n    };\r\n    // Classic.prototype.sqrTo = cSqrTo;\r\n    Classic.prototype.sqrTo = function (x, r) {\r\n        x.squareTo(r);\r\n        this.reduce(r);\r\n    };\r\n    return Classic;\r\n}());\r\n//#endregion\r\n//#region Montgomery\r\n// Montgomery reduction\r\nvar Montgomery = /** @class */ (function () {\r\n    function Montgomery(m) {\r\n        this.m = m;\r\n        this.mp = m.invDigit();\r\n        this.mpl = this.mp & 0x7fff;\r\n        this.mph = this.mp >> 15;\r\n        this.um = (1 << (m.DB - 15)) - 1;\r\n        this.mt2 = 2 * m.t;\r\n    }\r\n    // Montgomery.prototype.convert = montConvert;\r\n    // xR mod m\r\n    Montgomery.prototype.convert = function (x) {\r\n        var r = nbi();\r\n        x.abs().dlShiftTo(this.m.t, r);\r\n        r.divRemTo(this.m, null, r);\r\n        if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) {\r\n            this.m.subTo(r, r);\r\n        }\r\n        return r;\r\n    };\r\n    // Montgomery.prototype.revert = montRevert;\r\n    // x/R mod m\r\n    Montgomery.prototype.revert = function (x) {\r\n        var r = nbi();\r\n        x.copyTo(r);\r\n        this.reduce(r);\r\n        return r;\r\n    };\r\n    // Montgomery.prototype.reduce = montReduce;\r\n    // x = x/R mod m (HAC 14.32)\r\n    Montgomery.prototype.reduce = function (x) {\r\n        while (x.t <= this.mt2) {\r\n            // pad x so am has enough room later\r\n            x[x.t++] = 0;\r\n        }\r\n        for (var i = 0; i < this.m.t; ++i) {\r\n            // faster way of calculating u0 = x[i]*mp mod DV\r\n            var j = x[i] & 0x7fff;\r\n            var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\r\n            // use am to combine the multiply-shift-add into one call\r\n            j = i + this.m.t;\r\n            x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\r\n            // propagate carry\r\n            while (x[j] >= x.DV) {\r\n                x[j] -= x.DV;\r\n                x[++j]++;\r\n            }\r\n        }\r\n        x.clamp();\r\n        x.drShiftTo(this.m.t, x);\r\n        if (x.compareTo(this.m) >= 0) {\r\n            x.subTo(this.m, x);\r\n        }\r\n    };\r\n    // Montgomery.prototype.mulTo = montMulTo;\r\n    // r = \"xy/R mod m\"; x,y != r\r\n    Montgomery.prototype.mulTo = function (x, y, r) {\r\n        x.multiplyTo(y, r);\r\n        this.reduce(r);\r\n    };\r\n    // Montgomery.prototype.sqrTo = montSqrTo;\r\n    // r = \"x^2/R mod m\"; x != r\r\n    Montgomery.prototype.sqrTo = function (x, r) {\r\n        x.squareTo(r);\r\n        this.reduce(r);\r\n    };\r\n    return Montgomery;\r\n}());\r\n//#endregion Montgomery\r\n//#region Barrett\r\n// Barrett modular reduction\r\nvar Barrett = /** @class */ (function () {\r\n    function Barrett(m) {\r\n        this.m = m;\r\n        // setup Barrett\r\n        this.r2 = nbi();\r\n        this.q3 = nbi();\r\n        BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\r\n        this.mu = this.r2.divide(m);\r\n    }\r\n    // Barrett.prototype.convert = barrettConvert;\r\n    Barrett.prototype.convert = function (x) {\r\n        if (x.s < 0 || x.t > 2 * this.m.t) {\r\n            return x.mod(this.m);\r\n        }\r\n        else if (x.compareTo(this.m) < 0) {\r\n            return x;\r\n        }\r\n        else {\r\n            var r = nbi();\r\n            x.copyTo(r);\r\n            this.reduce(r);\r\n            return r;\r\n        }\r\n    };\r\n    // Barrett.prototype.revert = barrettRevert;\r\n    Barrett.prototype.revert = function (x) {\r\n        return x;\r\n    };\r\n    // Barrett.prototype.reduce = barrettReduce;\r\n    // x = x mod m (HAC 14.42)\r\n    Barrett.prototype.reduce = function (x) {\r\n        x.drShiftTo(this.m.t - 1, this.r2);\r\n        if (x.t > this.m.t + 1) {\r\n            x.t = this.m.t + 1;\r\n            x.clamp();\r\n        }\r\n        this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\r\n        this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\r\n        while (x.compareTo(this.r2) < 0) {\r\n            x.dAddOffset(1, this.m.t + 1);\r\n        }\r\n        x.subTo(this.r2, x);\r\n        while (x.compareTo(this.m) >= 0) {\r\n            x.subTo(this.m, x);\r\n        }\r\n    };\r\n    // Barrett.prototype.mulTo = barrettMulTo;\r\n    // r = x*y mod m; x,y != r\r\n    Barrett.prototype.mulTo = function (x, y, r) {\r\n        x.multiplyTo(y, r);\r\n        this.reduce(r);\r\n    };\r\n    // Barrett.prototype.sqrTo = barrettSqrTo;\r\n    // r = x^2 mod m; x != r\r\n    Barrett.prototype.sqrTo = function (x, r) {\r\n        x.squareTo(r);\r\n        this.reduce(r);\r\n    };\r\n    return Barrett;\r\n}());\r\n//#endregion\r\n//#endregion REDUCERS\r\n// return new, unset BigInteger\r\nfunction nbi() { return new BigInteger(null); }\r\nfunction parseBigInt(str, r) {\r\n    return new BigInteger(str, r);\r\n}\r\n// am: Compute w_j += (x*this_i), propagate carries,\r\n// c is initial carry, returns final carry.\r\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\r\n// We need to select the fastest one that works in this environment.\r\nvar inBrowser = typeof navigator !== \"undefined\";\r\nif (inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\r\n    // am2 avoids a big mult-and-extract completely.\r\n    // Max digit bits should be <= 30 because we do bitwise ops\r\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\r\n    BigInteger.prototype.am = function am2(i, x, w, j, c, n) {\r\n        var xl = x & 0x7fff;\r\n        var xh = x >> 15;\r\n        while (--n >= 0) {\r\n            var l = this[i] & 0x7fff;\r\n            var h = this[i++] >> 15;\r\n            var m = xh * l + h * xl;\r\n            l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\r\n            c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\r\n            w[j++] = l & 0x3fffffff;\r\n        }\r\n        return c;\r\n    };\r\n    dbits = 30;\r\n}\r\nelse if (inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\r\n    // am1: use a single mult and divide to get the high bits,\r\n    // max digit bits should be 26 because\r\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\r\n    BigInteger.prototype.am = function am1(i, x, w, j, c, n) {\r\n        while (--n >= 0) {\r\n            var v = x * this[i++] + w[j] + c;\r\n            c = Math.floor(v / 0x4000000);\r\n            w[j++] = v & 0x3ffffff;\r\n        }\r\n        return c;\r\n    };\r\n    dbits = 26;\r\n}\r\nelse { // Mozilla/Netscape seems to prefer am3\r\n    // Alternately, set max digit bits to 28 since some\r\n    // browsers slow down when dealing with 32-bit numbers.\r\n    BigInteger.prototype.am = function am3(i, x, w, j, c, n) {\r\n        var xl = x & 0x3fff;\r\n        var xh = x >> 14;\r\n        while (--n >= 0) {\r\n            var l = this[i] & 0x3fff;\r\n            var h = this[i++] >> 14;\r\n            var m = xh * l + h * xl;\r\n            l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\r\n            c = (l >> 28) + (m >> 14) + xh * h;\r\n            w[j++] = l & 0xfffffff;\r\n        }\r\n        return c;\r\n    };\r\n    dbits = 28;\r\n}\r\nBigInteger.prototype.DB = dbits;\r\nBigInteger.prototype.DM = ((1 << dbits) - 1);\r\nBigInteger.prototype.DV = (1 << dbits);\r\nvar BI_FP = 52;\r\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\r\nBigInteger.prototype.F1 = BI_FP - dbits;\r\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\r\n// Digit conversions\r\nvar BI_RC = [];\r\nvar rr;\r\nvar vv;\r\nrr = \"0\".charCodeAt(0);\r\nfor (vv = 0; vv <= 9; ++vv) {\r\n    BI_RC[rr++] = vv;\r\n}\r\nrr = \"a\".charCodeAt(0);\r\nfor (vv = 10; vv < 36; ++vv) {\r\n    BI_RC[rr++] = vv;\r\n}\r\nrr = \"A\".charCodeAt(0);\r\nfor (vv = 10; vv < 36; ++vv) {\r\n    BI_RC[rr++] = vv;\r\n}\r\nfunction intAt(s, i) {\r\n    var c = BI_RC[s.charCodeAt(i)];\r\n    return (c == null) ? -1 : c;\r\n}\r\n// return bigint initialized to value\r\nfunction nbv(i) {\r\n    var r = nbi();\r\n    r.fromInt(i);\r\n    return r;\r\n}\r\n// returns bit length of the integer x\r\nfunction nbits(x) {\r\n    var r = 1;\r\n    var t;\r\n    if ((t = x >>> 16) != 0) {\r\n        x = t;\r\n        r += 16;\r\n    }\r\n    if ((t = x >> 8) != 0) {\r\n        x = t;\r\n        r += 8;\r\n    }\r\n    if ((t = x >> 4) != 0) {\r\n        x = t;\r\n        r += 4;\r\n    }\r\n    if ((t = x >> 2) != 0) {\r\n        x = t;\r\n        r += 2;\r\n    }\r\n    if ((t = x >> 1) != 0) {\r\n        x = t;\r\n        r += 1;\r\n    }\r\n    return r;\r\n}\r\n// \"constants\"\r\nBigInteger.ZERO = nbv(0);\r\nBigInteger.ONE = nbv(1);\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/jsbn/jsbn.js?");

/***/ }),

/***/ "./lib/lib/jsbn/prng4.js":
/*!*******************************!*\
  !*** ./lib/lib/jsbn/prng4.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Arcfour\": () => (/* binding */ Arcfour),\n/* harmony export */   \"prng_newstate\": () => (/* binding */ prng_newstate),\n/* harmony export */   \"rng_psize\": () => (/* binding */ rng_psize)\n/* harmony export */ });\n// prng4.js - uses Arcfour as a PRNG\r\nvar Arcfour = /** @class */ (function () {\r\n    function Arcfour() {\r\n        this.i = 0;\r\n        this.j = 0;\r\n        this.S = [];\r\n    }\r\n    // Arcfour.prototype.init = ARC4init;\r\n    // Initialize arcfour context from key, an array of ints, each from [0..255]\r\n    Arcfour.prototype.init = function (key) {\r\n        var i;\r\n        var j;\r\n        var t;\r\n        for (i = 0; i < 256; ++i) {\r\n            this.S[i] = i;\r\n        }\r\n        j = 0;\r\n        for (i = 0; i < 256; ++i) {\r\n            j = (j + this.S[i] + key[i % key.length]) & 255;\r\n            t = this.S[i];\r\n            this.S[i] = this.S[j];\r\n            this.S[j] = t;\r\n        }\r\n        this.i = 0;\r\n        this.j = 0;\r\n    };\r\n    // Arcfour.prototype.next = ARC4next;\r\n    Arcfour.prototype.next = function () {\r\n        var t;\r\n        this.i = (this.i + 1) & 255;\r\n        this.j = (this.j + this.S[this.i]) & 255;\r\n        t = this.S[this.i];\r\n        this.S[this.i] = this.S[this.j];\r\n        this.S[this.j] = t;\r\n        return this.S[(t + this.S[this.i]) & 255];\r\n    };\r\n    return Arcfour;\r\n}());\r\n\r\n// Plug in your RNG constructor here\r\nfunction prng_newstate() {\r\n    return new Arcfour();\r\n}\r\n// Pool size must be a multiple of 4 and greater than 32.\r\n// An array of bytes the size of the pool will be passed to init()\r\nvar rng_psize = 256;\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/jsbn/prng4.js?");

/***/ }),

/***/ "./lib/lib/jsbn/rng.js":
/*!*****************************!*\
  !*** ./lib/lib/jsbn/rng.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"SecureRandom\": () => (/* binding */ SecureRandom)\n/* harmony export */ });\n/* harmony import */ var _prng4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prng4 */ \"./lib/lib/jsbn/prng4.js\");\n// Random number generator - requires a PRNG backend, e.g. prng4.js\r\n\r\nvar rng_state;\r\nvar rng_pool = null;\r\nvar rng_pptr;\r\n// Initialize the pool with junk if needed.\r\nif (rng_pool == null) {\r\n    rng_pool = [];\r\n    rng_pptr = 0;\r\n    var t = void 0;\r\n    if (typeof window !== 'undefined' && window.crypto && window.crypto.getRandomValues) {\r\n        // Extract entropy (2048 bits) from RNG if available\r\n        var z = new Uint32Array(256);\r\n        window.crypto.getRandomValues(z);\r\n        for (t = 0; t < z.length; ++t) {\r\n            rng_pool[rng_pptr++] = z[t] & 255;\r\n        }\r\n    }\r\n    // Use mouse events for entropy, if we do not have enough entropy by the time\r\n    // we need it, entropy will be generated by Math.random.\r\n    var count = 0;\r\n    var onMouseMoveListener_1 = function (ev) {\r\n        count = count || 0;\r\n        if (count >= 256 || rng_pptr >= _prng4__WEBPACK_IMPORTED_MODULE_0__.rng_psize) {\r\n            if (window.removeEventListener) {\r\n                window.removeEventListener(\"mousemove\", onMouseMoveListener_1, false);\r\n            }\r\n            else if (window.detachEvent) {\r\n                window.detachEvent(\"onmousemove\", onMouseMoveListener_1);\r\n            }\r\n            return;\r\n        }\r\n        try {\r\n            var mouseCoordinates = ev.x + ev.y;\r\n            rng_pool[rng_pptr++] = mouseCoordinates & 255;\r\n            count += 1;\r\n        }\r\n        catch (e) {\r\n            // Sometimes Firefox will deny permission to access event properties for some reason. Ignore.\r\n        }\r\n    };\r\n    if (typeof window !== 'undefined') {\r\n        if (window.addEventListener) {\r\n            window.addEventListener(\"mousemove\", onMouseMoveListener_1, false);\r\n        }\r\n        else if (window.attachEvent) {\r\n            window.attachEvent(\"onmousemove\", onMouseMoveListener_1);\r\n        }\r\n    }\r\n}\r\nfunction rng_get_byte() {\r\n    if (rng_state == null) {\r\n        rng_state = (0,_prng4__WEBPACK_IMPORTED_MODULE_0__.prng_newstate)();\r\n        // At this point, we may not have collected enough entropy.  If not, fall back to Math.random\r\n        while (rng_pptr < _prng4__WEBPACK_IMPORTED_MODULE_0__.rng_psize) {\r\n            var random = Math.floor(65536 * Math.random());\r\n            rng_pool[rng_pptr++] = random & 255;\r\n        }\r\n        rng_state.init(rng_pool);\r\n        for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {\r\n            rng_pool[rng_pptr] = 0;\r\n        }\r\n        rng_pptr = 0;\r\n    }\r\n    // TODO: allow reseeding after first request\r\n    return rng_state.next();\r\n}\r\nvar SecureRandom = /** @class */ (function () {\r\n    function SecureRandom() {\r\n    }\r\n    SecureRandom.prototype.nextBytes = function (ba) {\r\n        for (var i = 0; i < ba.length; ++i) {\r\n            ba[i] = rng_get_byte();\r\n        }\r\n    };\r\n    return SecureRandom;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/jsbn/rng.js?");

/***/ }),

/***/ "./lib/lib/jsbn/rsa.js":
/*!*****************************!*\
  !*** ./lib/lib/jsbn/rsa.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RSAKey\": () => (/* binding */ RSAKey)\n/* harmony export */ });\n/* harmony import */ var _jsbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsbn */ \"./lib/lib/jsbn/jsbn.js\");\n/* harmony import */ var _rng__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rng */ \"./lib/lib/jsbn/rng.js\");\n// Depends on jsbn.js and rng.js\r\n// Version 1.1: support utf-8 encoding in pkcs1pad2\r\n// convert a (hex) string to a bignum object\r\n\r\n\r\n// function linebrk(s,n) {\r\n//   var ret = \"\";\r\n//   var i = 0;\r\n//   while(i + n < s.length) {\r\n//     ret += s.substring(i,i+n) + \"\\n\";\r\n//     i += n;\r\n//   }\r\n//   return ret + s.substring(i,s.length);\r\n// }\r\n// function byte2Hex(b) {\r\n//   if(b < 0x10)\r\n//     return \"0\" + b.toString(16);\r\n//   else\r\n//     return b.toString(16);\r\n// }\r\nfunction pkcs1pad1(s, n) {\r\n    if (n < s.length + 22) {\r\n        console.error(\"Message too long for RSA\");\r\n        return null;\r\n    }\r\n    var len = n - s.length - 6;\r\n    var filler = \"\";\r\n    for (var f = 0; f < len; f += 2) {\r\n        filler += \"ff\";\r\n    }\r\n    var m = \"0001\" + filler + \"00\" + s;\r\n    return (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(m, 16);\r\n}\r\n// 增加私钥加密时使用的封包方法，基于 pkcs1pad1 & pkcs1pad2 修改\r\nfunction pkcs1pad1ForPrivateKeyEncrypt(s, n) {\r\n    if (n < s.length + 22) {\r\n        console.error(\"Message too long for RSA\");\r\n        return null;\r\n    }\r\n    // 原 pkcs1pad1 方法未对输入字符串进行字节数组转换，导致转换为大整数时出错，最终无法计算出正确的加密内容\r\n    // 故借用 pkcs1pad2 中的代码，将输入字符串转为字节数组\r\n    // 参考来源：https://www.cnblogs.com/wsss/p/11516318.html\r\n    var ba = [];\r\n    var i = s.length - 1;\r\n    while (i >= 0 && n > 0) {\r\n        var c = s.charCodeAt(i--);\r\n        if (c < 128) { // encode using utf-8\r\n            ba[--n] = c;\r\n        }\r\n        else if ((c > 127) && (c < 2048)) {\r\n            ba[--n] = (c & 63) | 128;\r\n            ba[--n] = (c >> 6) | 192;\r\n        }\r\n        else {\r\n            ba[--n] = (c & 63) | 128;\r\n            ba[--n] = ((c >> 6) & 63) | 128;\r\n            ba[--n] = (c >> 12) | 224;\r\n        }\r\n    }\r\n    // 中间填充一个 0x00\r\n    ba[--n] = 0;\r\n    // 其余空位填充 0xff\r\n    while (n > 2) {\r\n        ba[--n] = 0xff;\r\n    }\r\n    // 最前两位填充 0x00 0x01\r\n    ba[1] = 0x01;\r\n    ba[0] = 0x00;\r\n    // 在进行 RSA 运算前，需要先将源数据 D 封装为 Encryption block（EB）。\r\n    // 其中 PKCS #1: RSA Encryption Version 1.5 的数据块组成如下：\r\n    // \r\n    // EB = 0x00 + BT + PS + 0x00 + D\r\n    // \r\n    // 说明：EB 为转化后的字节数组（一般以 16 进制表示），EB字节数组长度 = 密钥长度 / 8\r\n    // \r\n    // 0x00：第一位固定为 0x00\r\n    // BT：公钥加密：0x02，私钥加密：0x00 或 0x01\r\n    // \r\n    // PS：填充位，除固定位和数据位外，对 EB 的其余字节位进行填充，一般至少保留 8 位。\r\n    // BT = 0x00 时全部填充 0x00（此种情景下，数据部分的首位字节必须非零，否则将无法准确的识别数据区）\r\n    // BT = 0x01 时全部填充 0xFF\r\n    // BT = 0x02 时随机产生数字填充（不允许填充 0x00）\r\n    // \r\n    // 0x00：源数据 D 的前一个字节，固定为 0x00，用于分隔填充位与数据区\r\n    // D：源数据，填充在 EB 最后，因以上组成部分，源数据字节数组最大长度 = 密钥长度 / 8 - (1 + 1 + 8 + 1)，即：EB长度-11\r\n    //\r\n    // 一般 RSA 密钥长度为 1024 位，则：\r\n    // EB字节数组长度 = 1024 / 8 = 128\r\n    // 源数据字节数组最大长度 = 128 - 11 = 117\r\n    // \r\n    // 参考来源：https://datatracker.ietf.org/doc/html/rfc2313#section-8.1\r\n    return new _jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(ba);\r\n}\r\n// PKCS#1 (type 2, random) pad input string s to n bytes, and return a bigint\r\nfunction pkcs1pad2(s, n) {\r\n    if (n < s.length + 11) { // TODO: fix for utf-8\r\n        console.error(\"Message too long for RSA\");\r\n        return null;\r\n    }\r\n    var ba = [];\r\n    var i = s.length - 1;\r\n    while (i >= 0 && n > 0) {\r\n        var c = s.charCodeAt(i--);\r\n        if (c < 128) { // encode using utf-8\r\n            ba[--n] = c;\r\n        }\r\n        else if ((c > 127) && (c < 2048)) {\r\n            ba[--n] = (c & 63) | 128;\r\n            ba[--n] = (c >> 6) | 192;\r\n        }\r\n        else {\r\n            ba[--n] = (c & 63) | 128;\r\n            ba[--n] = ((c >> 6) & 63) | 128;\r\n            ba[--n] = (c >> 12) | 224;\r\n        }\r\n    }\r\n    ba[--n] = 0;\r\n    var rng = new _rng__WEBPACK_IMPORTED_MODULE_1__.SecureRandom();\r\n    var x = [];\r\n    while (n > 2) { // random non-zero pad\r\n        x[0] = 0;\r\n        while (x[0] == 0) {\r\n            rng.nextBytes(x);\r\n        }\r\n        ba[--n] = x[0];\r\n    }\r\n    ba[--n] = 2;\r\n    ba[--n] = 0;\r\n    return new _jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(ba);\r\n}\r\n// \"empty\" RSA key constructor\r\nvar RSAKey = /** @class */ (function () {\r\n    function RSAKey() {\r\n        this.n = null;\r\n        this.e = 0;\r\n        this.d = null;\r\n        this.p = null;\r\n        this.q = null;\r\n        this.dmp1 = null;\r\n        this.dmq1 = null;\r\n        this.coeff = null;\r\n    }\r\n    //#region PROTECTED\r\n    // protected\r\n    // RSAKey.prototype.doPublic = RSADoPublic;\r\n    // Perform raw public operation on \"x\": return x^e (mod n)\r\n    RSAKey.prototype.doPublic = function (x) {\r\n        return x.modPowInt(this.e, this.n);\r\n    };\r\n    // RSAKey.prototype.doPrivate = RSADoPrivate;\r\n    // Perform raw private operation on \"x\": return x^d (mod n)\r\n    RSAKey.prototype.doPrivate = function (x) {\r\n        if (this.p == null || this.q == null) {\r\n            return x.modPow(this.d, this.n);\r\n        }\r\n        // TODO: re-calculate any missing CRT params\r\n        var xp = x.mod(this.p).modPow(this.dmp1, this.p);\r\n        var xq = x.mod(this.q).modPow(this.dmq1, this.q);\r\n        while (xp.compareTo(xq) < 0) {\r\n            xp = xp.add(this.p);\r\n        }\r\n        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\r\n    };\r\n    //#endregion PROTECTED\r\n    //#region PUBLIC\r\n    // RSAKey.prototype.setPublic = RSASetPublic;\r\n    // Set the public key fields N and e from hex strings\r\n    RSAKey.prototype.setPublic = function (N, E) {\r\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\r\n            this.n = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(N, 16);\r\n            this.e = parseInt(E, 16);\r\n        }\r\n        else {\r\n            console.error(\"Invalid RSA public key\");\r\n        }\r\n    };\r\n    // RSAKey.prototype.encrypt = RSAEncrypt;\r\n    // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\r\n    RSAKey.prototype.encrypt = function (text) {\r\n        var maxLength = (this.n.bitLength() + 7) >> 3;\r\n        var m = pkcs1pad2(text, maxLength);\r\n        if (m == null) {\r\n            return null;\r\n        }\r\n        var c = this.doPublic(m);\r\n        if (c == null) {\r\n            return null;\r\n        }\r\n        var h = c.toString(16);\r\n        var length = h.length;\r\n        // fix zero before result\r\n        for (var i = 0; i < maxLength * 2 - length; i++) {\r\n            h = \"0\" + h;\r\n        }\r\n        return h;\r\n    };\r\n    // 增加私钥加密方法，基于 encrypt 修改\r\n    // RSAKey.prototype.encryptByPrivate = RSAEncryptByPrivate;\r\n    // Return the PKCS#1 RSA encryption of \"text\" as an even-length hex string\r\n    RSAKey.prototype.encryptByPrivate = function (text) {\r\n        var maxLength = (this.n.bitLength() + 7) >> 3;\r\n        var m = pkcs1pad1ForPrivateKeyEncrypt(text, maxLength);\r\n        if (m == null) {\r\n            return null;\r\n        }\r\n        var c = this.doPrivate(m);\r\n        if (c == null) {\r\n            return null;\r\n        }\r\n        var h = c.toString(16);\r\n        var length = h.length;\r\n        // fix zero before result\r\n        for (var i = 0; i < maxLength * 2 - length; i++) {\r\n            h = \"0\" + h;\r\n        }\r\n        return h;\r\n    };\r\n    // RSAKey.prototype.setPrivate = RSASetPrivate;\r\n    // Set the private key fields N, e, and d from hex strings\r\n    RSAKey.prototype.setPrivate = function (N, E, D) {\r\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\r\n            this.n = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(N, 16);\r\n            this.e = parseInt(E, 16);\r\n            this.d = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(D, 16);\r\n        }\r\n        else {\r\n            console.error(\"Invalid RSA private key\");\r\n        }\r\n    };\r\n    // RSAKey.prototype.setPrivateEx = RSASetPrivateEx;\r\n    // Set the private key fields N, e, d and CRT params from hex strings\r\n    RSAKey.prototype.setPrivateEx = function (N, E, D, P, Q, DP, DQ, C) {\r\n        if (N != null && E != null && N.length > 0 && E.length > 0) {\r\n            this.n = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(N, 16);\r\n            this.e = parseInt(E, 16);\r\n            this.d = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(D, 16);\r\n            this.p = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(P, 16);\r\n            this.q = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(Q, 16);\r\n            this.dmp1 = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(DP, 16);\r\n            this.dmq1 = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(DQ, 16);\r\n            this.coeff = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(C, 16);\r\n        }\r\n        else {\r\n            console.error(\"Invalid RSA private key\");\r\n        }\r\n    };\r\n    // RSAKey.prototype.generate = RSAGenerate;\r\n    // Generate a new random private key B bits long, using public expt E\r\n    RSAKey.prototype.generate = function (B, E) {\r\n        var rng = new _rng__WEBPACK_IMPORTED_MODULE_1__.SecureRandom();\r\n        var qs = B >> 1;\r\n        this.e = parseInt(E, 16);\r\n        var ee = new _jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(E, 16);\r\n        for (;;) {\r\n            for (;;) {\r\n                this.p = new _jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(B - qs, 1, rng);\r\n                if (this.p.subtract(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE).gcd(ee).compareTo(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) {\r\n                    break;\r\n                }\r\n            }\r\n            for (;;) {\r\n                this.q = new _jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(qs, 1, rng);\r\n                if (this.q.subtract(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE).gcd(ee).compareTo(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) {\r\n                    break;\r\n                }\r\n            }\r\n            if (this.p.compareTo(this.q) <= 0) {\r\n                var t = this.p;\r\n                this.p = this.q;\r\n                this.q = t;\r\n            }\r\n            var p1 = this.p.subtract(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE);\r\n            var q1 = this.q.subtract(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE);\r\n            var phi = p1.multiply(q1);\r\n            if (phi.gcd(ee).compareTo(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE) == 0) {\r\n                this.n = this.p.multiply(this.q);\r\n                this.d = ee.modInverse(phi);\r\n                this.dmp1 = this.d.mod(p1);\r\n                this.dmq1 = this.d.mod(q1);\r\n                this.coeff = this.q.modInverse(this.p);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    // RSAKey.prototype.decrypt = RSADecrypt;\r\n    // Return the PKCS#1 RSA decryption of \"ctext\".\r\n    // \"ctext\" is an even-length hex string and the output is a plain string.\r\n    RSAKey.prototype.decrypt = function (ctext) {\r\n        var c = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(ctext, 16);\r\n        var m = this.doPrivate(c);\r\n        if (m == null) {\r\n            return null;\r\n        }\r\n        return pkcs1unpad2(m, (this.n.bitLength() + 7) >> 3);\r\n    };\r\n    // 增加公钥解密方法，基于 decrypt 修改\r\n    // RSAKey.prototype.decryptByPublic = RSADecryptByPuclic;\r\n    // Return the PKCS#1 RSA decryption of \"ctext\".\r\n    // \"ctext\" is an even-length hex string and the output is a plain string.\r\n    RSAKey.prototype.decryptByPublic = function (ctext) {\r\n        var c = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(ctext, 16);\r\n        var m = this.doPublic(c);\r\n        if (m == null) {\r\n            return null;\r\n        }\r\n        return pkcs1unpad2ForPublicKeyDecrypt(m, (this.n.bitLength() + 7) >> 3);\r\n    };\r\n    // Generate a new random private key B bits long, using public expt E\r\n    RSAKey.prototype.generateAsync = function (B, E, callback) {\r\n        var rng = new _rng__WEBPACK_IMPORTED_MODULE_1__.SecureRandom();\r\n        var qs = B >> 1;\r\n        this.e = parseInt(E, 16);\r\n        var ee = new _jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(E, 16);\r\n        var rsa = this;\r\n        // These functions have non-descript names because they were originally for(;;) loops.\r\n        // I don't know about cryptography to give them better names than loop1-4.\r\n        var loop1 = function () {\r\n            var loop4 = function () {\r\n                if (rsa.p.compareTo(rsa.q) <= 0) {\r\n                    var t = rsa.p;\r\n                    rsa.p = rsa.q;\r\n                    rsa.q = t;\r\n                }\r\n                var p1 = rsa.p.subtract(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE);\r\n                var q1 = rsa.q.subtract(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE);\r\n                var phi = p1.multiply(q1);\r\n                if (phi.gcd(ee).compareTo(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE) == 0) {\r\n                    rsa.n = rsa.p.multiply(rsa.q);\r\n                    rsa.d = ee.modInverse(phi);\r\n                    rsa.dmp1 = rsa.d.mod(p1);\r\n                    rsa.dmq1 = rsa.d.mod(q1);\r\n                    rsa.coeff = rsa.q.modInverse(rsa.p);\r\n                    setTimeout(function () { callback(); }, 0); // escape\r\n                }\r\n                else {\r\n                    setTimeout(loop1, 0);\r\n                }\r\n            };\r\n            var loop3 = function () {\r\n                rsa.q = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.nbi)();\r\n                rsa.q.fromNumberAsync(qs, 1, rng, function () {\r\n                    rsa.q.subtract(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE).gcda(ee, function (r) {\r\n                        if (r.compareTo(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE) == 0 && rsa.q.isProbablePrime(10)) {\r\n                            setTimeout(loop4, 0);\r\n                        }\r\n                        else {\r\n                            setTimeout(loop3, 0);\r\n                        }\r\n                    });\r\n                });\r\n            };\r\n            var loop2 = function () {\r\n                rsa.p = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.nbi)();\r\n                rsa.p.fromNumberAsync(B - qs, 1, rng, function () {\r\n                    rsa.p.subtract(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE).gcda(ee, function (r) {\r\n                        if (r.compareTo(_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE) == 0 && rsa.p.isProbablePrime(10)) {\r\n                            setTimeout(loop3, 0);\r\n                        }\r\n                        else {\r\n                            setTimeout(loop2, 0);\r\n                        }\r\n                    });\r\n                });\r\n            };\r\n            setTimeout(loop2, 0);\r\n        };\r\n        setTimeout(loop1, 0);\r\n    };\r\n    RSAKey.prototype.sign = function (text, digestMethod, digestName) {\r\n        var header = getDigestHeader(digestName);\r\n        var digest = header + digestMethod(text).toString();\r\n        var m = pkcs1pad1(digest, this.n.bitLength() / 4);\r\n        if (m == null) {\r\n            return null;\r\n        }\r\n        var c = this.doPrivate(m);\r\n        if (c == null) {\r\n            return null;\r\n        }\r\n        var h = c.toString(16);\r\n        if ((h.length & 1) == 0) {\r\n            return h;\r\n        }\r\n        else {\r\n            return \"0\" + h;\r\n        }\r\n    };\r\n    RSAKey.prototype.verify = function (text, signature, digestMethod) {\r\n        var c = (0,_jsbn__WEBPACK_IMPORTED_MODULE_0__.parseBigInt)(signature, 16);\r\n        var m = this.doPublic(c);\r\n        if (m == null) {\r\n            return null;\r\n        }\r\n        var unpadded = m.toString(16).replace(/^1f+00/, \"\");\r\n        var digest = removeDigestHeader(unpadded);\r\n        return digest == digestMethod(text).toString();\r\n    };\r\n    return RSAKey;\r\n}());\r\n\r\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\r\nfunction pkcs1unpad2(d, n) {\r\n    var b = d.toByteArray();\r\n    var i = 0;\r\n    while (i < b.length && b[i] == 0) {\r\n        ++i;\r\n    }\r\n    if (b.length - i != n - 1 || b[i] != 2) {\r\n        return null;\r\n    }\r\n    ++i;\r\n    while (b[i] != 0) {\r\n        if (++i >= b.length) {\r\n            return null;\r\n        }\r\n    }\r\n    var ret = \"\";\r\n    while (++i < b.length) {\r\n        var c = b[i] & 255;\r\n        if (c < 128) { // utf-8 decode\r\n            ret += String.fromCharCode(c);\r\n        }\r\n        else if ((c > 191) && (c < 224)) {\r\n            ret += String.fromCharCode(((c & 31) << 6) | (b[i + 1] & 63));\r\n            ++i;\r\n        }\r\n        else {\r\n            ret += String.fromCharCode(((c & 15) << 12) | ((b[i + 1] & 63) << 6) | (b[i + 2] & 63));\r\n            i += 2;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n// 增加公钥解密时使用的解包方法，基于 pkcs1unpad2 修改\r\n// Undo PKCS#1 (type 2, random) padding and, if valid, return the plaintext\r\nfunction pkcs1unpad2ForPublicKeyDecrypt(d, n) {\r\n    var b = d.toByteArray();\r\n    var i = 0;\r\n    while (i < b.length && b[i] == 0) {\r\n        ++i;\r\n    }\r\n    // 注释此部分，以适配 pkcs1pad1 方法的结果（私钥加密）\r\n    // 参考来源：https://github.com/lwenhaoCN/RSA\r\n    //if (b.length - i != n - 1 || b[i] != 2) {\r\n    //    return null;\r\n    //}\r\n    ++i;\r\n    while (b[i] != 0) {\r\n        if (++i >= b.length) {\r\n            return null;\r\n        }\r\n    }\r\n    var ret = \"\";\r\n    while (++i < b.length) {\r\n        var c = b[i] & 255;\r\n        if (c < 128) { // utf-8 decode\r\n            ret += String.fromCharCode(c);\r\n        }\r\n        else if ((c > 191) && (c < 224)) {\r\n            ret += String.fromCharCode(((c & 31) << 6) | (b[i + 1] & 63));\r\n            ++i;\r\n        }\r\n        else {\r\n            ret += String.fromCharCode(((c & 15) << 12) | ((b[i + 1] & 63) << 6) | (b[i + 2] & 63));\r\n            i += 2;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n// https://tools.ietf.org/html/rfc3447#page-43\r\nvar DIGEST_HEADERS = {\r\n    md2: \"3020300c06082a864886f70d020205000410\",\r\n    md5: \"3020300c06082a864886f70d020505000410\",\r\n    sha1: \"3021300906052b0e03021a05000414\",\r\n    sha224: \"302d300d06096086480165030402040500041c\",\r\n    sha256: \"3031300d060960864801650304020105000420\",\r\n    sha384: \"3041300d060960864801650304020205000430\",\r\n    sha512: \"3051300d060960864801650304020305000440\",\r\n    ripemd160: \"3021300906052b2403020105000414\"\r\n};\r\nfunction getDigestHeader(name) {\r\n    return DIGEST_HEADERS[name] || \"\";\r\n}\r\nfunction removeDigestHeader(str) {\r\n    for (var name_1 in DIGEST_HEADERS) {\r\n        if (DIGEST_HEADERS.hasOwnProperty(name_1)) {\r\n            var header = DIGEST_HEADERS[name_1];\r\n            var len = header.length;\r\n            if (str.substr(0, len) == header) {\r\n                return str.substr(len);\r\n            }\r\n        }\r\n    }\r\n    return str;\r\n}\r\n// Return the PKCS#1 RSA encryption of \"text\" as a Base64-encoded string\r\n// function RSAEncryptB64(text) {\r\n//  var h = this.encrypt(text);\r\n//  if(h) return hex2b64(h); else return null;\r\n// }\r\n// public\r\n// RSAKey.prototype.encrypt_b64 = RSAEncryptB64;\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/jsbn/rsa.js?");

/***/ }),

/***/ "./lib/lib/jsbn/util.js":
/*!******************************!*\
  !*** ./lib/lib/jsbn/util.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cbit\": () => (/* binding */ cbit),\n/* harmony export */   \"int2char\": () => (/* binding */ int2char),\n/* harmony export */   \"lbit\": () => (/* binding */ lbit),\n/* harmony export */   \"op_and\": () => (/* binding */ op_and),\n/* harmony export */   \"op_andnot\": () => (/* binding */ op_andnot),\n/* harmony export */   \"op_or\": () => (/* binding */ op_or),\n/* harmony export */   \"op_xor\": () => (/* binding */ op_xor)\n/* harmony export */ });\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\nfunction int2char(n) {\r\n    return BI_RM.charAt(n);\r\n}\r\n//#region BIT_OPERATIONS\r\n// (public) this & a\r\nfunction op_and(x, y) {\r\n    return x & y;\r\n}\r\n// (public) this | a\r\nfunction op_or(x, y) {\r\n    return x | y;\r\n}\r\n// (public) this ^ a\r\nfunction op_xor(x, y) {\r\n    return x ^ y;\r\n}\r\n// (public) this & ~a\r\nfunction op_andnot(x, y) {\r\n    return x & ~y;\r\n}\r\n// return index of lowest 1-bit in x, x < 2^31\r\nfunction lbit(x) {\r\n    if (x == 0) {\r\n        return -1;\r\n    }\r\n    var r = 0;\r\n    if ((x & 0xffff) == 0) {\r\n        x >>= 16;\r\n        r += 16;\r\n    }\r\n    if ((x & 0xff) == 0) {\r\n        x >>= 8;\r\n        r += 8;\r\n    }\r\n    if ((x & 0xf) == 0) {\r\n        x >>= 4;\r\n        r += 4;\r\n    }\r\n    if ((x & 3) == 0) {\r\n        x >>= 2;\r\n        r += 2;\r\n    }\r\n    if ((x & 1) == 0) {\r\n        ++r;\r\n    }\r\n    return r;\r\n}\r\n// return number of 1 bits in x\r\nfunction cbit(x) {\r\n    var r = 0;\r\n    while (x != 0) {\r\n        x &= x - 1;\r\n        ++r;\r\n    }\r\n    return r;\r\n}\r\n//#endregion BIT_OPERATIONS\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/jsbn/util.js?");

/***/ }),

/***/ "./lib/lib/jsrsasign/asn1-1.0.js":
/*!***************************************!*\
  !*** ./lib/lib/jsrsasign/asn1-1.0.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KJUR\": () => (/* binding */ KJUR)\n/* harmony export */ });\n/* harmony import */ var _jsbn_jsbn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsbn/jsbn */ \"./lib/lib/jsbn/jsbn.js\");\n/* harmony import */ var _yahoo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./yahoo */ \"./lib/lib/jsrsasign/yahoo.js\");\n/* asn1-1.0.13.js (c) 2013-2017 Kenji Urushima | kjur.github.com/jsrsasign/license\r\n */\r\n/*\r\n * asn1.js - ASN.1 DER encoder classes\r\n *\r\n * Copyright (c) 2013-2017 Kenji Urushima (kenji.urushima@gmail.com)\r\n *\r\n * This software is licensed under the terms of the MIT License.\r\n * https://kjur.github.io/jsrsasign/license\r\n *\r\n * The above copyright and license notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n */\r\n\r\n\r\n/**\r\n * @fileOverview\r\n * @name asn1-1.0.js\r\n * @author Kenji Urushima kenji.urushima@gmail.com\r\n * @version asn1 1.0.13 (2017-Jun-02)\r\n * @since jsrsasign 2.1\r\n * @license <a href=\"https://kjur.github.io/jsrsasign/license/\">MIT License</a>\r\n */\r\n/**\r\n * kjur's class library name space\r\n * <p>\r\n * This name space provides following name spaces:\r\n * <ul>\r\n * <li>{@link KJUR.asn1} - ASN.1 primitive hexadecimal encoder</li>\r\n * <li>{@link KJUR.asn1.x509} - ASN.1 structure for X.509 certificate and CRL</li>\r\n * <li>{@link KJUR.crypto} - Java Cryptographic Extension(JCE) style MessageDigest/Signature\r\n * class and utilities</li>\r\n * </ul>\r\n * </p>\r\n * NOTE: Please ignore method summary and document of this namespace. This caused by a bug of jsdoc2.\r\n * @name KJUR\r\n * @namespace kjur's class library name space\r\n */\r\nvar KJUR = {};\r\n/**\r\n * kjur's ASN.1 class library name space\r\n * <p>\r\n * This is ITU-T X.690 ASN.1 DER encoder class library and\r\n * class structure and methods is very similar to\r\n * org.bouncycastle.asn1 package of\r\n * well known BouncyCaslte Cryptography Library.\r\n * <h4>PROVIDING ASN.1 PRIMITIVES</h4>\r\n * Here are ASN.1 DER primitive classes.\r\n * <ul>\r\n * <li>0x01 {@link KJUR.asn1.DERBoolean}</li>\r\n * <li>0x02 {@link KJUR.asn1.DERInteger}</li>\r\n * <li>0x03 {@link KJUR.asn1.DERBitString}</li>\r\n * <li>0x04 {@link KJUR.asn1.DEROctetString}</li>\r\n * <li>0x05 {@link KJUR.asn1.DERNull}</li>\r\n * <li>0x06 {@link KJUR.asn1.DERObjectIdentifier}</li>\r\n * <li>0x0a {@link KJUR.asn1.DEREnumerated}</li>\r\n * <li>0x0c {@link KJUR.asn1.DERUTF8String}</li>\r\n * <li>0x12 {@link KJUR.asn1.DERNumericString}</li>\r\n * <li>0x13 {@link KJUR.asn1.DERPrintableString}</li>\r\n * <li>0x14 {@link KJUR.asn1.DERTeletexString}</li>\r\n * <li>0x16 {@link KJUR.asn1.DERIA5String}</li>\r\n * <li>0x17 {@link KJUR.asn1.DERUTCTime}</li>\r\n * <li>0x18 {@link KJUR.asn1.DERGeneralizedTime}</li>\r\n * <li>0x30 {@link KJUR.asn1.DERSequence}</li>\r\n * <li>0x31 {@link KJUR.asn1.DERSet}</li>\r\n * </ul>\r\n * <h4>OTHER ASN.1 CLASSES</h4>\r\n * <ul>\r\n * <li>{@link KJUR.asn1.ASN1Object}</li>\r\n * <li>{@link KJUR.asn1.DERAbstractString}</li>\r\n * <li>{@link KJUR.asn1.DERAbstractTime}</li>\r\n * <li>{@link KJUR.asn1.DERAbstractStructured}</li>\r\n * <li>{@link KJUR.asn1.DERTaggedObject}</li>\r\n * </ul>\r\n * <h4>SUB NAME SPACES</h4>\r\n * <ul>\r\n * <li>{@link KJUR.asn1.cades} - CAdES long term signature format</li>\r\n * <li>{@link KJUR.asn1.cms} - Cryptographic Message Syntax</li>\r\n * <li>{@link KJUR.asn1.csr} - Certificate Signing Request (CSR/PKCS#10)</li>\r\n * <li>{@link KJUR.asn1.tsp} - RFC 3161 Timestamping Protocol Format</li>\r\n * <li>{@link KJUR.asn1.x509} - RFC 5280 X.509 certificate and CRL</li>\r\n * </ul>\r\n * </p>\r\n * NOTE: Please ignore method summary and document of this namespace.\r\n * This caused by a bug of jsdoc2.\r\n * @name KJUR.asn1\r\n * @namespace\r\n */\r\nif (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1)\r\n    KJUR.asn1 = {};\r\n/**\r\n * ASN1 utilities class\r\n * @name KJUR.asn1.ASN1Util\r\n * @class ASN1 utilities class\r\n * @since asn1 1.0.2\r\n */\r\nKJUR.asn1.ASN1Util = new function () {\r\n    this.integerToByteHex = function (i) {\r\n        var h = i.toString(16);\r\n        if ((h.length % 2) == 1)\r\n            h = '0' + h;\r\n        return h;\r\n    };\r\n    this.bigIntToMinTwosComplementsHex = function (bigIntegerValue) {\r\n        var h = bigIntegerValue.toString(16);\r\n        if (h.substr(0, 1) != '-') {\r\n            if (h.length % 2 == 1) {\r\n                h = '0' + h;\r\n            }\r\n            else {\r\n                if (!h.match(/^[0-7]/)) {\r\n                    h = '00' + h;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var hPos = h.substr(1);\r\n            var xorLen = hPos.length;\r\n            if (xorLen % 2 == 1) {\r\n                xorLen += 1;\r\n            }\r\n            else {\r\n                if (!h.match(/^[0-7]/)) {\r\n                    xorLen += 2;\r\n                }\r\n            }\r\n            var hMask = '';\r\n            for (var i = 0; i < xorLen; i++) {\r\n                hMask += 'f';\r\n            }\r\n            var biMask = new _jsbn_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(hMask, 16);\r\n            var biNeg = biMask.xor(bigIntegerValue).add(_jsbn_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger.ONE);\r\n            h = biNeg.toString(16).replace(/^-/, '');\r\n        }\r\n        return h;\r\n    };\r\n    /**\r\n     * get PEM string from hexadecimal data and header string\r\n     * @name getPEMStringFromHex\r\n     * @memberOf KJUR.asn1.ASN1Util\r\n     * @function\r\n     * @param {String} dataHex hexadecimal string of PEM body\r\n     * @param {String} pemHeader PEM header string (ex. 'RSA PRIVATE KEY')\r\n     * @return {String} PEM formatted string of input data\r\n     * @description\r\n     * This method converts a hexadecimal string to a PEM string with\r\n     * a specified header. Its line break will be CRLF(\"\\r\\n\").\r\n     * @example\r\n     * var pem  = KJUR.asn1.ASN1Util.getPEMStringFromHex('616161', 'RSA PRIVATE KEY');\r\n     * // value of pem will be:\r\n     * -----BEGIN PRIVATE KEY-----\r\n     * YWFh\r\n     * -----END PRIVATE KEY-----\r\n     */\r\n    this.getPEMStringFromHex = function (dataHex, pemHeader) {\r\n        return hextopem(dataHex, pemHeader);\r\n    };\r\n    /**\r\n     * generate ASN1Object specifed by JSON parameters\r\n     * @name newObject\r\n     * @memberOf KJUR.asn1.ASN1Util\r\n     * @function\r\n     * @param {Array} param JSON parameter to generate ASN1Object\r\n     * @return {KJUR.asn1.ASN1Object} generated object\r\n     * @since asn1 1.0.3\r\n     * @description\r\n     * generate any ASN1Object specified by JSON param\r\n     * including ASN.1 primitive or structured.\r\n     * Generally 'param' can be described as follows:\r\n     * <blockquote>\r\n     * {TYPE-OF-ASNOBJ: ASN1OBJ-PARAMETER}\r\n     * </blockquote>\r\n     * 'TYPE-OF-ASN1OBJ' can be one of following symbols:\r\n     * <ul>\r\n     * <li>'bool' - DERBoolean</li>\r\n     * <li>'int' - DERInteger</li>\r\n     * <li>'bitstr' - DERBitString</li>\r\n     * <li>'octstr' - DEROctetString</li>\r\n     * <li>'null' - DERNull</li>\r\n     * <li>'oid' - DERObjectIdentifier</li>\r\n     * <li>'enum' - DEREnumerated</li>\r\n     * <li>'utf8str' - DERUTF8String</li>\r\n     * <li>'numstr' - DERNumericString</li>\r\n     * <li>'prnstr' - DERPrintableString</li>\r\n     * <li>'telstr' - DERTeletexString</li>\r\n     * <li>'ia5str' - DERIA5String</li>\r\n     * <li>'utctime' - DERUTCTime</li>\r\n     * <li>'gentime' - DERGeneralizedTime</li>\r\n     * <li>'seq' - DERSequence</li>\r\n     * <li>'set' - DERSet</li>\r\n     * <li>'tag' - DERTaggedObject</li>\r\n     * </ul>\r\n     * @example\r\n     * newObject({'prnstr': 'aaa'});\r\n     * newObject({'seq': [{'int': 3}, {'prnstr': 'aaa'}]})\r\n     * // ASN.1 Tagged Object\r\n     * newObject({'tag': {'tag': 'a1',\r\n     *                    'explicit': true,\r\n     *                    'obj': {'seq': [{'int': 3}, {'prnstr': 'aaa'}]}}});\r\n     * // more simple representation of ASN.1 Tagged Object\r\n     * newObject({'tag': ['a1',\r\n     *                    true,\r\n     *                    {'seq': [\r\n     *                      {'int': 3},\r\n     *                      {'prnstr': 'aaa'}]}\r\n     *                   ]});\r\n     */\r\n    this.newObject = function (param) {\r\n        var _KJUR = KJUR, _KJUR_asn1 = _KJUR.asn1, _DERBoolean = _KJUR_asn1.DERBoolean, _DERInteger = _KJUR_asn1.DERInteger, _DERBitString = _KJUR_asn1.DERBitString, _DEROctetString = _KJUR_asn1.DEROctetString, _DERNull = _KJUR_asn1.DERNull, _DERObjectIdentifier = _KJUR_asn1.DERObjectIdentifier, _DEREnumerated = _KJUR_asn1.DEREnumerated, _DERUTF8String = _KJUR_asn1.DERUTF8String, _DERNumericString = _KJUR_asn1.DERNumericString, _DERPrintableString = _KJUR_asn1.DERPrintableString, _DERTeletexString = _KJUR_asn1.DERTeletexString, _DERIA5String = _KJUR_asn1.DERIA5String, _DERUTCTime = _KJUR_asn1.DERUTCTime, _DERGeneralizedTime = _KJUR_asn1.DERGeneralizedTime, _DERSequence = _KJUR_asn1.DERSequence, _DERSet = _KJUR_asn1.DERSet, _DERTaggedObject = _KJUR_asn1.DERTaggedObject, _newObject = _KJUR_asn1.ASN1Util.newObject;\r\n        var keys = Object.keys(param);\r\n        if (keys.length != 1)\r\n            throw \"key of param shall be only one.\";\r\n        var key = keys[0];\r\n        if (\":bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:seq:set:tag:\".indexOf(\":\" + key + \":\") == -1)\r\n            throw \"undefined key: \" + key;\r\n        if (key == \"bool\")\r\n            return new _DERBoolean(param[key]);\r\n        if (key == \"int\")\r\n            return new _DERInteger(param[key]);\r\n        if (key == \"bitstr\")\r\n            return new _DERBitString(param[key]);\r\n        if (key == \"octstr\")\r\n            return new _DEROctetString(param[key]);\r\n        if (key == \"null\")\r\n            return new _DERNull(param[key]);\r\n        if (key == \"oid\")\r\n            return new _DERObjectIdentifier(param[key]);\r\n        if (key == \"enum\")\r\n            return new _DEREnumerated(param[key]);\r\n        if (key == \"utf8str\")\r\n            return new _DERUTF8String(param[key]);\r\n        if (key == \"numstr\")\r\n            return new _DERNumericString(param[key]);\r\n        if (key == \"prnstr\")\r\n            return new _DERPrintableString(param[key]);\r\n        if (key == \"telstr\")\r\n            return new _DERTeletexString(param[key]);\r\n        if (key == \"ia5str\")\r\n            return new _DERIA5String(param[key]);\r\n        if (key == \"utctime\")\r\n            return new _DERUTCTime(param[key]);\r\n        if (key == \"gentime\")\r\n            return new _DERGeneralizedTime(param[key]);\r\n        if (key == \"seq\") {\r\n            var paramList = param[key];\r\n            var a = [];\r\n            for (var i = 0; i < paramList.length; i++) {\r\n                var asn1Obj = _newObject(paramList[i]);\r\n                a.push(asn1Obj);\r\n            }\r\n            return new _DERSequence({ 'array': a });\r\n        }\r\n        if (key == \"set\") {\r\n            var paramList = param[key];\r\n            var a = [];\r\n            for (var i = 0; i < paramList.length; i++) {\r\n                var asn1Obj = _newObject(paramList[i]);\r\n                a.push(asn1Obj);\r\n            }\r\n            return new _DERSet({ 'array': a });\r\n        }\r\n        if (key == \"tag\") {\r\n            var tagParam = param[key];\r\n            if (Object.prototype.toString.call(tagParam) === '[object Array]' &&\r\n                tagParam.length == 3) {\r\n                var obj = _newObject(tagParam[2]);\r\n                return new _DERTaggedObject({ tag: tagParam[0],\r\n                    explicit: tagParam[1],\r\n                    obj: obj });\r\n            }\r\n            else {\r\n                var newParam = {};\r\n                if (tagParam.explicit !== undefined)\r\n                    newParam.explicit = tagParam.explicit;\r\n                if (tagParam.tag !== undefined)\r\n                    newParam.tag = tagParam.tag;\r\n                if (tagParam.obj === undefined)\r\n                    throw \"obj shall be specified for 'tag'.\";\r\n                newParam.obj = _newObject(tagParam.obj);\r\n                return new _DERTaggedObject(newParam);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * get encoded hexadecimal string of ASN1Object specifed by JSON parameters\r\n     * @name jsonToASN1HEX\r\n     * @memberOf KJUR.asn1.ASN1Util\r\n     * @function\r\n     * @param {Array} param JSON parameter to generate ASN1Object\r\n     * @return hexadecimal string of ASN1Object\r\n     * @since asn1 1.0.4\r\n     * @description\r\n     * As for ASN.1 object representation of JSON object,\r\n     * please see {@link newObject}.\r\n     * @example\r\n     * jsonToASN1HEX({'prnstr': 'aaa'});\r\n     */\r\n    this.jsonToASN1HEX = function (param) {\r\n        var asn1Obj = this.newObject(param);\r\n        return asn1Obj.getEncodedHex();\r\n    };\r\n};\r\n/**\r\n * get dot noted oid number string from hexadecimal value of OID\r\n * @name oidHexToInt\r\n * @memberOf KJUR.asn1.ASN1Util\r\n * @function\r\n * @param {String} hex hexadecimal value of object identifier\r\n * @return {String} dot noted string of object identifier\r\n * @since jsrsasign 4.8.3 asn1 1.0.7\r\n * @description\r\n * This static method converts from hexadecimal string representation of\r\n * ASN.1 value of object identifier to oid number string.\r\n * @example\r\n * KJUR.asn1.ASN1Util.oidHexToInt('550406') &rarr; \"2.5.4.6\"\r\n */\r\nKJUR.asn1.ASN1Util.oidHexToInt = function (hex) {\r\n    var s = \"\";\r\n    var i01 = parseInt(hex.substr(0, 2), 16);\r\n    var i0 = Math.floor(i01 / 40);\r\n    var i1 = i01 % 40;\r\n    var s = i0 + \".\" + i1;\r\n    var binbuf = \"\";\r\n    for (var i = 2; i < hex.length; i += 2) {\r\n        var value = parseInt(hex.substr(i, 2), 16);\r\n        var bin = (\"00000000\" + value.toString(2)).slice(-8);\r\n        binbuf = binbuf + bin.substr(1, 7);\r\n        if (bin.substr(0, 1) == \"0\") {\r\n            var bi = new _jsbn_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(binbuf, 2);\r\n            s = s + \".\" + bi.toString(10);\r\n            binbuf = \"\";\r\n        }\r\n    }\r\n    ;\r\n    return s;\r\n};\r\n/**\r\n * get hexadecimal value of object identifier from dot noted oid value\r\n * @name oidIntToHex\r\n * @memberOf KJUR.asn1.ASN1Util\r\n * @function\r\n * @param {String} oidString dot noted string of object identifier\r\n * @return {String} hexadecimal value of object identifier\r\n * @since jsrsasign 4.8.3 asn1 1.0.7\r\n * @description\r\n * This static method converts from object identifier value string.\r\n * to hexadecimal string representation of it.\r\n * @example\r\n * KJUR.asn1.ASN1Util.oidIntToHex(\"2.5.4.6\") &rarr; \"550406\"\r\n */\r\nKJUR.asn1.ASN1Util.oidIntToHex = function (oidString) {\r\n    var itox = function (i) {\r\n        var h = i.toString(16);\r\n        if (h.length == 1)\r\n            h = '0' + h;\r\n        return h;\r\n    };\r\n    var roidtox = function (roid) {\r\n        var h = '';\r\n        var bi = new _jsbn_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(roid, 10);\r\n        var b = bi.toString(2);\r\n        var padLen = 7 - b.length % 7;\r\n        if (padLen == 7)\r\n            padLen = 0;\r\n        var bPad = '';\r\n        for (var i = 0; i < padLen; i++)\r\n            bPad += '0';\r\n        b = bPad + b;\r\n        for (var i = 0; i < b.length - 1; i += 7) {\r\n            var b8 = b.substr(i, 7);\r\n            if (i != b.length - 7)\r\n                b8 = '1' + b8;\r\n            h += itox(parseInt(b8, 2));\r\n        }\r\n        return h;\r\n    };\r\n    if (!oidString.match(/^[0-9.]+$/)) {\r\n        throw \"malformed oid string: \" + oidString;\r\n    }\r\n    var h = '';\r\n    var a = oidString.split('.');\r\n    var i0 = parseInt(a[0]) * 40 + parseInt(a[1]);\r\n    h += itox(i0);\r\n    a.splice(0, 2);\r\n    for (var i = 0; i < a.length; i++) {\r\n        h += roidtox(a[i]);\r\n    }\r\n    return h;\r\n};\r\n// ********************************************************************\r\n//  Abstract ASN.1 Classes\r\n// ********************************************************************\r\n// ********************************************************************\r\n/**\r\n * base class for ASN.1 DER encoder object\r\n * @name KJUR.asn1.ASN1Object\r\n * @class base class for ASN.1 DER encoder object\r\n * @property {Boolean} isModified flag whether internal data was changed\r\n * @property {String} hTLV hexadecimal string of ASN.1 TLV\r\n * @property {String} hT hexadecimal string of ASN.1 TLV tag(T)\r\n * @property {String} hL hexadecimal string of ASN.1 TLV length(L)\r\n * @property {String} hV hexadecimal string of ASN.1 TLV value(V)\r\n * @description\r\n */\r\nKJUR.asn1.ASN1Object = function () {\r\n    var isModified = true;\r\n    var hTLV = null;\r\n    var hT = '00';\r\n    var hL = '00';\r\n    var hV = '';\r\n    /**\r\n     * get hexadecimal ASN.1 TLV length(L) bytes from TLV value(V)\r\n     * @name getLengthHexFromValue\r\n     * @memberOf KJUR.asn1.ASN1Object#\r\n     * @function\r\n     * @return {String} hexadecimal string of ASN.1 TLV length(L)\r\n     */\r\n    this.getLengthHexFromValue = function () {\r\n        if (typeof this.hV == \"undefined\" || this.hV == null) {\r\n            throw \"this.hV is null or undefined.\";\r\n        }\r\n        if (this.hV.length % 2 == 1) {\r\n            throw \"value hex must be even length: n=\" + hV.length + \",v=\" + this.hV;\r\n        }\r\n        var n = this.hV.length / 2;\r\n        var hN = n.toString(16);\r\n        if (hN.length % 2 == 1) {\r\n            hN = \"0\" + hN;\r\n        }\r\n        if (n < 128) {\r\n            return hN;\r\n        }\r\n        else {\r\n            var hNlen = hN.length / 2;\r\n            if (hNlen > 15) {\r\n                throw \"ASN.1 length too long to represent by 8x: n = \" + n.toString(16);\r\n            }\r\n            var head = 128 + hNlen;\r\n            return head.toString(16) + hN;\r\n        }\r\n    };\r\n    /**\r\n     * get hexadecimal string of ASN.1 TLV bytes\r\n     * @name getEncodedHex\r\n     * @memberOf KJUR.asn1.ASN1Object#\r\n     * @function\r\n     * @return {String} hexadecimal string of ASN.1 TLV\r\n     */\r\n    this.getEncodedHex = function () {\r\n        if (this.hTLV == null || this.isModified) {\r\n            this.hV = this.getFreshValueHex();\r\n            this.hL = this.getLengthHexFromValue();\r\n            this.hTLV = this.hT + this.hL + this.hV;\r\n            this.isModified = false;\r\n            //alert(\"first time: \" + this.hTLV);\r\n        }\r\n        return this.hTLV;\r\n    };\r\n    /**\r\n     * get hexadecimal string of ASN.1 TLV value(V) bytes\r\n     * @name getValueHex\r\n     * @memberOf KJUR.asn1.ASN1Object#\r\n     * @function\r\n     * @return {String} hexadecimal string of ASN.1 TLV value(V) bytes\r\n     */\r\n    this.getValueHex = function () {\r\n        this.getEncodedHex();\r\n        return this.hV;\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        return '';\r\n    };\r\n};\r\n// == BEGIN DERAbstractString ================================================\r\n/**\r\n * base class for ASN.1 DER string classes\r\n * @name KJUR.asn1.DERAbstractString\r\n * @class base class for ASN.1 DER string classes\r\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n * @property {String} s internal string of value\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * <br/>\r\n * As for argument 'params' for constructor, you can specify one of\r\n * following properties:\r\n * <ul>\r\n * <li>str - specify initial ASN.1 value(V) by a string</li>\r\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n * </ul>\r\n * NOTE: 'params' can be omitted.\r\n */\r\nKJUR.asn1.DERAbstractString = function (params) {\r\n    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\r\n    var s = null;\r\n    var hV = null;\r\n    /**\r\n     * get string value of this string object\r\n     * @name getString\r\n     * @memberOf KJUR.asn1.DERAbstractString#\r\n     * @function\r\n     * @return {String} string value of this string object\r\n     */\r\n    this.getString = function () {\r\n        return this.s;\r\n    };\r\n    /**\r\n     * set value by a string\r\n     * @name setString\r\n     * @memberOf KJUR.asn1.DERAbstractString#\r\n     * @function\r\n     * @param {String} newS value by a string to set\r\n     */\r\n    this.setString = function (newS) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.s = newS;\r\n        this.hV = stohex(this.s);\r\n    };\r\n    /**\r\n     * set value by a hexadecimal string\r\n     * @name setStringHex\r\n     * @memberOf KJUR.asn1.DERAbstractString#\r\n     * @function\r\n     * @param {String} newHexString value by a hexadecimal string to set\r\n     */\r\n    this.setStringHex = function (newHexString) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.s = null;\r\n        this.hV = newHexString;\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        return this.hV;\r\n    };\r\n    if (typeof params != \"undefined\") {\r\n        if (typeof params == \"string\") {\r\n            this.setString(params);\r\n        }\r\n        else if (typeof params['str'] != \"undefined\") {\r\n            this.setString(params['str']);\r\n        }\r\n        else if (typeof params['hex'] != \"undefined\") {\r\n            this.setStringHex(params['hex']);\r\n        }\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);\r\n// == END   DERAbstractString ================================================\r\n// == BEGIN DERAbstractTime ==================================================\r\n/**\r\n * base class for ASN.1 DER Generalized/UTCTime class\r\n * @name KJUR.asn1.DERAbstractTime\r\n * @class base class for ASN.1 DER Generalized/UTCTime class\r\n * @param {Array} params associative array of parameters (ex. {'str': '130430235959Z'})\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * @see KJUR.asn1.ASN1Object - superclass\r\n */\r\nKJUR.asn1.DERAbstractTime = function (params) {\r\n    KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);\r\n    var s = null;\r\n    var date = null;\r\n    // --- PRIVATE METHODS --------------------\r\n    this.localDateToUTC = function (d) {\r\n        utc = d.getTime() + (d.getTimezoneOffset() * 60000);\r\n        var utcDate = new Date(utc);\r\n        return utcDate;\r\n    };\r\n    /*\r\n     * format date string by Data object\r\n     * @name formatDate\r\n     * @memberOf KJUR.asn1.AbstractTime;\r\n     * @param {Date} dateObject\r\n     * @param {string} type 'utc' or 'gen'\r\n     * @param {boolean} withMillis flag for with millisections or not\r\n     * @description\r\n     * 'withMillis' flag is supported from asn1 1.0.6.\r\n     */\r\n    this.formatDate = function (dateObject, type, withMillis) {\r\n        var pad = this.zeroPadding;\r\n        var d = this.localDateToUTC(dateObject);\r\n        var year = String(d.getFullYear());\r\n        if (type == 'utc')\r\n            year = year.substr(2, 2);\r\n        var month = pad(String(d.getMonth() + 1), 2);\r\n        var day = pad(String(d.getDate()), 2);\r\n        var hour = pad(String(d.getHours()), 2);\r\n        var min = pad(String(d.getMinutes()), 2);\r\n        var sec = pad(String(d.getSeconds()), 2);\r\n        var s = year + month + day + hour + min + sec;\r\n        if (withMillis === true) {\r\n            var millis = d.getMilliseconds();\r\n            if (millis != 0) {\r\n                var sMillis = pad(String(millis), 3);\r\n                sMillis = sMillis.replace(/[0]+$/, \"\");\r\n                s = s + \".\" + sMillis;\r\n            }\r\n        }\r\n        return s + \"Z\";\r\n    };\r\n    this.zeroPadding = function (s, len) {\r\n        if (s.length >= len)\r\n            return s;\r\n        return new Array(len - s.length + 1).join('0') + s;\r\n    };\r\n    // --- PUBLIC METHODS --------------------\r\n    /**\r\n     * get string value of this string object\r\n     * @name getString\r\n     * @memberOf KJUR.asn1.DERAbstractTime#\r\n     * @function\r\n     * @return {String} string value of this time object\r\n     */\r\n    this.getString = function () {\r\n        return this.s;\r\n    };\r\n    /**\r\n     * set value by a string\r\n     * @name setString\r\n     * @memberOf KJUR.asn1.DERAbstractTime#\r\n     * @function\r\n     * @param {String} newS value by a string to set such like \"130430235959Z\"\r\n     */\r\n    this.setString = function (newS) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.s = newS;\r\n        this.hV = stohex(newS);\r\n    };\r\n    /**\r\n     * set value by a Date object\r\n     * @name setByDateValue\r\n     * @memberOf KJUR.asn1.DERAbstractTime#\r\n     * @function\r\n     * @param {Integer} year year of date (ex. 2013)\r\n     * @param {Integer} month month of date between 1 and 12 (ex. 12)\r\n     * @param {Integer} day day of month\r\n     * @param {Integer} hour hours of date\r\n     * @param {Integer} min minutes of date\r\n     * @param {Integer} sec seconds of date\r\n     */\r\n    this.setByDateValue = function (year, month, day, hour, min, sec) {\r\n        var dateObject = new Date(Date.UTC(year, month - 1, day, hour, min, sec, 0));\r\n        this.setByDate(dateObject);\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        return this.hV;\r\n    };\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);\r\n// == END   DERAbstractTime ==================================================\r\n// == BEGIN DERAbstractStructured ============================================\r\n/**\r\n * base class for ASN.1 DER structured class\r\n * @name KJUR.asn1.DERAbstractStructured\r\n * @class base class for ASN.1 DER structured class\r\n * @property {Array} asn1Array internal array of ASN1Object\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * @see KJUR.asn1.ASN1Object - superclass\r\n */\r\nKJUR.asn1.DERAbstractStructured = function (params) {\r\n    KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\r\n    var asn1Array = null;\r\n    /**\r\n     * set value by array of ASN1Object\r\n     * @name setByASN1ObjectArray\r\n     * @memberOf KJUR.asn1.DERAbstractStructured#\r\n     * @function\r\n     * @param {array} asn1ObjectArray array of ASN1Object to set\r\n     */\r\n    this.setByASN1ObjectArray = function (asn1ObjectArray) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.asn1Array = asn1ObjectArray;\r\n    };\r\n    /**\r\n     * append an ASN1Object to internal array\r\n     * @name appendASN1Object\r\n     * @memberOf KJUR.asn1.DERAbstractStructured#\r\n     * @function\r\n     * @param {ASN1Object} asn1Object to add\r\n     */\r\n    this.appendASN1Object = function (asn1Object) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.asn1Array.push(asn1Object);\r\n    };\r\n    this.asn1Array = new Array();\r\n    if (typeof params != \"undefined\") {\r\n        if (typeof params['array'] != \"undefined\") {\r\n            this.asn1Array = params['array'];\r\n        }\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);\r\n// ********************************************************************\r\n//  ASN.1 Object Classes\r\n// ********************************************************************\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER Boolean\r\n * @name KJUR.asn1.DERBoolean\r\n * @class class for ASN.1 DER Boolean\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * @see KJUR.asn1.ASN1Object - superclass\r\n */\r\nKJUR.asn1.DERBoolean = function () {\r\n    KJUR.asn1.DERBoolean.superclass.constructor.call(this);\r\n    this.hT = \"01\";\r\n    this.hTLV = \"0101ff\";\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER Integer\r\n * @name KJUR.asn1.DERInteger\r\n * @class class for ASN.1 DER Integer\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * <br/>\r\n * As for argument 'params' for constructor, you can specify one of\r\n * following properties:\r\n * <ul>\r\n * <li>int - specify initial ASN.1 value(V) by integer value</li>\r\n * <li>bigint - specify initial ASN.1 value(V) by BigInteger object</li>\r\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n * </ul>\r\n * NOTE: 'params' can be omitted.\r\n */\r\nKJUR.asn1.DERInteger = function (params) {\r\n    KJUR.asn1.DERInteger.superclass.constructor.call(this);\r\n    this.hT = \"02\";\r\n    /**\r\n     * set value by Tom Wu's BigInteger object\r\n     * @name setByBigInteger\r\n     * @memberOf KJUR.asn1.DERInteger#\r\n     * @function\r\n     * @param {BigInteger} bigIntegerValue to set\r\n     */\r\n    this.setByBigInteger = function (bigIntegerValue) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);\r\n    };\r\n    /**\r\n     * set value by integer value\r\n     * @name setByInteger\r\n     * @memberOf KJUR.asn1.DERInteger\r\n     * @function\r\n     * @param {Integer} integer value to set\r\n     */\r\n    this.setByInteger = function (intValue) {\r\n        var bi = new _jsbn_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(String(intValue), 10);\r\n        this.setByBigInteger(bi);\r\n    };\r\n    /**\r\n     * set value by integer value\r\n     * @name setValueHex\r\n     * @memberOf KJUR.asn1.DERInteger#\r\n     * @function\r\n     * @param {String} hexadecimal string of integer value\r\n     * @description\r\n     * <br/>\r\n     * NOTE: Value shall be represented by minimum octet length of\r\n     * two's complement representation.\r\n     * @example\r\n     * new KJUR.asn1.DERInteger(123);\r\n     * new KJUR.asn1.DERInteger({'int': 123});\r\n     * new KJUR.asn1.DERInteger({'hex': '1fad'});\r\n     */\r\n    this.setValueHex = function (newHexString) {\r\n        this.hV = newHexString;\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        return this.hV;\r\n    };\r\n    if (typeof params != \"undefined\") {\r\n        if (typeof params['bigint'] != \"undefined\") {\r\n            this.setByBigInteger(params['bigint']);\r\n        }\r\n        else if (typeof params['int'] != \"undefined\") {\r\n            this.setByInteger(params['int']);\r\n        }\r\n        else if (typeof params == \"number\") {\r\n            this.setByInteger(params);\r\n        }\r\n        else if (typeof params['hex'] != \"undefined\") {\r\n            this.setValueHex(params['hex']);\r\n        }\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER encoded BitString primitive\r\n * @name KJUR.asn1.DERBitString\r\n * @class class for ASN.1 DER encoded BitString primitive\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * <br/>\r\n * As for argument 'params' for constructor, you can specify one of\r\n * following properties:\r\n * <ul>\r\n * <li>bin - specify binary string (ex. '10111')</li>\r\n * <li>array - specify array of boolean (ex. [true,false,true,true])</li>\r\n * <li>hex - specify hexadecimal string of ASN.1 value(V) including unused bits</li>\r\n * <li>obj - specify {@link KJUR.asn1.ASN1Util.newObject}\r\n * argument for \"BitString encapsulates\" structure.</li>\r\n * </ul>\r\n * NOTE1: 'params' can be omitted.<br/>\r\n * NOTE2: 'obj' parameter have been supported since\r\n * asn1 1.0.11, jsrsasign 6.1.1 (2016-Sep-25).<br/>\r\n * @example\r\n * // default constructor\r\n * o = new KJUR.asn1.DERBitString();\r\n * // initialize with binary string\r\n * o = new KJUR.asn1.DERBitString({bin: \"1011\"});\r\n * // initialize with boolean array\r\n * o = new KJUR.asn1.DERBitString({array: [true,false,true,true]});\r\n * // initialize with hexadecimal string (04 is unused bits)\r\n * o = new KJUR.asn1.DEROctetString({hex: \"04bac0\"});\r\n * // initialize with ASN1Util.newObject argument for encapsulated\r\n * o = new KJUR.asn1.DERBitString({obj: {seq: [{int: 3}, {prnstr: 'aaa'}]}});\r\n * // above generates a ASN.1 data like this:\r\n * // BIT STRING, encapsulates {\r\n * //   SEQUENCE {\r\n * //     INTEGER 3\r\n * //     PrintableString 'aaa'\r\n * //     }\r\n * //   }\r\n */\r\nKJUR.asn1.DERBitString = function (params) {\r\n    if (params !== undefined && typeof params.obj !== \"undefined\") {\r\n        var o = KJUR.asn1.ASN1Util.newObject(params.obj);\r\n        params.hex = \"00\" + o.getEncodedHex();\r\n    }\r\n    KJUR.asn1.DERBitString.superclass.constructor.call(this);\r\n    this.hT = \"03\";\r\n    /**\r\n     * set ASN.1 value(V) by a hexadecimal string including unused bits\r\n     * @name setHexValueIncludingUnusedBits\r\n     * @memberOf KJUR.asn1.DERBitString#\r\n     * @function\r\n     * @param {String} newHexStringIncludingUnusedBits\r\n     */\r\n    this.setHexValueIncludingUnusedBits = function (newHexStringIncludingUnusedBits) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.hV = newHexStringIncludingUnusedBits;\r\n    };\r\n    /**\r\n     * set ASN.1 value(V) by unused bit and hexadecimal string of value\r\n     * @name setUnusedBitsAndHexValue\r\n     * @memberOf KJUR.asn1.DERBitString#\r\n     * @function\r\n     * @param {Integer} unusedBits\r\n     * @param {String} hValue\r\n     */\r\n    this.setUnusedBitsAndHexValue = function (unusedBits, hValue) {\r\n        if (unusedBits < 0 || 7 < unusedBits) {\r\n            throw \"unused bits shall be from 0 to 7: u = \" + unusedBits;\r\n        }\r\n        var hUnusedBits = \"0\" + unusedBits;\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.hV = hUnusedBits + hValue;\r\n    };\r\n    /**\r\n     * set ASN.1 DER BitString by binary string<br/>\r\n     * @name setByBinaryString\r\n     * @memberOf KJUR.asn1.DERBitString#\r\n     * @function\r\n     * @param {String} binaryString binary value string (i.e. '10111')\r\n     * @description\r\n     * Its unused bits will be calculated automatically by length of\r\n     * 'binaryValue'. <br/>\r\n     * NOTE: Trailing zeros '0' will be ignored.\r\n     * @example\r\n     * o = new KJUR.asn1.DERBitString();\r\n     * o.setByBooleanArray(\"01011\");\r\n     */\r\n    this.setByBinaryString = function (binaryString) {\r\n        binaryString = binaryString.replace(/0+$/, '');\r\n        var unusedBits = 8 - binaryString.length % 8;\r\n        if (unusedBits == 8)\r\n            unusedBits = 0;\r\n        for (var i = 0; i <= unusedBits; i++) {\r\n            binaryString += '0';\r\n        }\r\n        var h = '';\r\n        for (var i = 0; i < binaryString.length - 1; i += 8) {\r\n            var b = binaryString.substr(i, 8);\r\n            var x = parseInt(b, 2).toString(16);\r\n            if (x.length == 1)\r\n                x = '0' + x;\r\n            h += x;\r\n        }\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.hV = '0' + unusedBits + h;\r\n    };\r\n    /**\r\n     * set ASN.1 TLV value(V) by an array of boolean<br/>\r\n     * @name setByBooleanArray\r\n     * @memberOf KJUR.asn1.DERBitString#\r\n     * @function\r\n     * @param {array} booleanArray array of boolean (ex. [true, false, true])\r\n     * @description\r\n     * NOTE: Trailing falses will be ignored in the ASN.1 DER Object.\r\n     * @example\r\n     * o = new KJUR.asn1.DERBitString();\r\n     * o.setByBooleanArray([false, true, false, true, true]);\r\n     */\r\n    this.setByBooleanArray = function (booleanArray) {\r\n        var s = '';\r\n        for (var i = 0; i < booleanArray.length; i++) {\r\n            if (booleanArray[i] == true) {\r\n                s += '1';\r\n            }\r\n            else {\r\n                s += '0';\r\n            }\r\n        }\r\n        this.setByBinaryString(s);\r\n    };\r\n    /**\r\n     * generate an array of falses with specified length<br/>\r\n     * @name newFalseArray\r\n     * @memberOf KJUR.asn1.DERBitString\r\n     * @function\r\n     * @param {Integer} nLength length of array to generate\r\n     * @return {array} array of boolean falses\r\n     * @description\r\n     * This static method may be useful to initialize boolean array.\r\n     * @example\r\n     * o = new KJUR.asn1.DERBitString();\r\n     * o.newFalseArray(3) &rarr; [false, false, false]\r\n     */\r\n    this.newFalseArray = function (nLength) {\r\n        var a = new Array(nLength);\r\n        for (var i = 0; i < nLength; i++) {\r\n            a[i] = false;\r\n        }\r\n        return a;\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        return this.hV;\r\n    };\r\n    if (typeof params != \"undefined\") {\r\n        if (typeof params == \"string\" && params.toLowerCase().match(/^[0-9a-f]+$/)) {\r\n            this.setHexValueIncludingUnusedBits(params);\r\n        }\r\n        else if (typeof params['hex'] != \"undefined\") {\r\n            this.setHexValueIncludingUnusedBits(params['hex']);\r\n        }\r\n        else if (typeof params['bin'] != \"undefined\") {\r\n            this.setByBinaryString(params['bin']);\r\n        }\r\n        else if (typeof params['array'] != \"undefined\") {\r\n            this.setByBooleanArray(params['array']);\r\n        }\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER OctetString<br/>\r\n * @name KJUR.asn1.DEROctetString\r\n * @class class for ASN.1 DER OctetString\r\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n * @extends KJUR.asn1.DERAbstractString\r\n * @description\r\n * This class provides ASN.1 OctetString simple type.<br/>\r\n * Supported \"params\" attributes are:\r\n * <ul>\r\n * <li>str - to set a string as a value</li>\r\n * <li>hex - to set a hexadecimal string as a value</li>\r\n * <li>obj - to set a encapsulated ASN.1 value by JSON object\r\n * which is defined in {@link KJUR.asn1.ASN1Util.newObject}</li>\r\n * </ul>\r\n * NOTE: A parameter 'obj' have been supported\r\n * for \"OCTET STRING, encapsulates\" structure.\r\n * since asn1 1.0.11, jsrsasign 6.1.1 (2016-Sep-25).\r\n * @see KJUR.asn1.DERAbstractString - superclass\r\n * @example\r\n * // default constructor\r\n * o = new KJUR.asn1.DEROctetString();\r\n * // initialize with string\r\n * o = new KJUR.asn1.DEROctetString({str: \"aaa\"});\r\n * // initialize with hexadecimal string\r\n * o = new KJUR.asn1.DEROctetString({hex: \"616161\"});\r\n * // initialize with ASN1Util.newObject argument\r\n * o = new KJUR.asn1.DEROctetString({obj: {seq: [{int: 3}, {prnstr: 'aaa'}]}});\r\n * // above generates a ASN.1 data like this:\r\n * // OCTET STRING, encapsulates {\r\n * //   SEQUENCE {\r\n * //     INTEGER 3\r\n * //     PrintableString 'aaa'\r\n * //     }\r\n * //   }\r\n */\r\nKJUR.asn1.DEROctetString = function (params) {\r\n    if (params !== undefined && typeof params.obj !== \"undefined\") {\r\n        var o = KJUR.asn1.ASN1Util.newObject(params.obj);\r\n        params.hex = o.getEncodedHex();\r\n    }\r\n    KJUR.asn1.DEROctetString.superclass.constructor.call(this, params);\r\n    this.hT = \"04\";\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER Null\r\n * @name KJUR.asn1.DERNull\r\n * @class class for ASN.1 DER Null\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * @see KJUR.asn1.ASN1Object - superclass\r\n */\r\nKJUR.asn1.DERNull = function () {\r\n    KJUR.asn1.DERNull.superclass.constructor.call(this);\r\n    this.hT = \"05\";\r\n    this.hTLV = \"0500\";\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER ObjectIdentifier\r\n * @name KJUR.asn1.DERObjectIdentifier\r\n * @class class for ASN.1 DER ObjectIdentifier\r\n * @param {Array} params associative array of parameters (ex. {'oid': '2.5.4.5'})\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * <br/>\r\n * As for argument 'params' for constructor, you can specify one of\r\n * following properties:\r\n * <ul>\r\n * <li>oid - specify initial ASN.1 value(V) by a oid string (ex. 2.5.4.13)</li>\r\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n * </ul>\r\n * NOTE: 'params' can be omitted.\r\n */\r\nKJUR.asn1.DERObjectIdentifier = function (params) {\r\n    var itox = function (i) {\r\n        var h = i.toString(16);\r\n        if (h.length == 1)\r\n            h = '0' + h;\r\n        return h;\r\n    };\r\n    var roidtox = function (roid) {\r\n        var h = '';\r\n        var bi = new _jsbn_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(roid, 10);\r\n        var b = bi.toString(2);\r\n        var padLen = 7 - b.length % 7;\r\n        if (padLen == 7)\r\n            padLen = 0;\r\n        var bPad = '';\r\n        for (var i = 0; i < padLen; i++)\r\n            bPad += '0';\r\n        b = bPad + b;\r\n        for (var i = 0; i < b.length - 1; i += 7) {\r\n            var b8 = b.substr(i, 7);\r\n            if (i != b.length - 7)\r\n                b8 = '1' + b8;\r\n            h += itox(parseInt(b8, 2));\r\n        }\r\n        return h;\r\n    };\r\n    KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);\r\n    this.hT = \"06\";\r\n    /**\r\n     * set value by a hexadecimal string\r\n     * @name setValueHex\r\n     * @memberOf KJUR.asn1.DERObjectIdentifier#\r\n     * @function\r\n     * @param {String} newHexString hexadecimal value of OID bytes\r\n     */\r\n    this.setValueHex = function (newHexString) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.s = null;\r\n        this.hV = newHexString;\r\n    };\r\n    /**\r\n     * set value by a OID string<br/>\r\n     * @name setValueOidString\r\n     * @memberOf KJUR.asn1.DERObjectIdentifier#\r\n     * @function\r\n     * @param {String} oidString OID string (ex. 2.5.4.13)\r\n     * @example\r\n     * o = new KJUR.asn1.DERObjectIdentifier();\r\n     * o.setValueOidString(\"2.5.4.13\");\r\n     */\r\n    this.setValueOidString = function (oidString) {\r\n        if (!oidString.match(/^[0-9.]+$/)) {\r\n            throw \"malformed oid string: \" + oidString;\r\n        }\r\n        var h = '';\r\n        var a = oidString.split('.');\r\n        var i0 = parseInt(a[0]) * 40 + parseInt(a[1]);\r\n        h += itox(i0);\r\n        a.splice(0, 2);\r\n        for (var i = 0; i < a.length; i++) {\r\n            h += roidtox(a[i]);\r\n        }\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.s = null;\r\n        this.hV = h;\r\n    };\r\n    /**\r\n     * set value by a OID name\r\n     * @name setValueName\r\n     * @memberOf KJUR.asn1.DERObjectIdentifier#\r\n     * @function\r\n     * @param {String} oidName OID name (ex. 'serverAuth')\r\n     * @since 1.0.1\r\n     * @description\r\n     * OID name shall be defined in 'KJUR.asn1.x509.OID.name2oidList'.\r\n     * Otherwise raise error.\r\n     * @example\r\n     * o = new KJUR.asn1.DERObjectIdentifier();\r\n     * o.setValueName(\"serverAuth\");\r\n     */\r\n    this.setValueName = function (oidName) {\r\n        var oid = KJUR.asn1.x509.OID.name2oid(oidName);\r\n        if (oid !== '') {\r\n            this.setValueOidString(oid);\r\n        }\r\n        else {\r\n            throw \"DERObjectIdentifier oidName undefined: \" + oidName;\r\n        }\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        return this.hV;\r\n    };\r\n    if (params !== undefined) {\r\n        if (typeof params === \"string\") {\r\n            if (params.match(/^[0-2].[0-9.]+$/)) {\r\n                this.setValueOidString(params);\r\n            }\r\n            else {\r\n                this.setValueName(params);\r\n            }\r\n        }\r\n        else if (params.oid !== undefined) {\r\n            this.setValueOidString(params.oid);\r\n        }\r\n        else if (params.hex !== undefined) {\r\n            this.setValueHex(params.hex);\r\n        }\r\n        else if (params.name !== undefined) {\r\n            this.setValueName(params.name);\r\n        }\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER Enumerated\r\n * @name KJUR.asn1.DEREnumerated\r\n * @class class for ASN.1 DER Enumerated\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * <br/>\r\n * As for argument 'params' for constructor, you can specify one of\r\n * following properties:\r\n * <ul>\r\n * <li>int - specify initial ASN.1 value(V) by integer value</li>\r\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n * </ul>\r\n * NOTE: 'params' can be omitted.\r\n * @example\r\n * new KJUR.asn1.DEREnumerated(123);\r\n * new KJUR.asn1.DEREnumerated({int: 123});\r\n * new KJUR.asn1.DEREnumerated({hex: '1fad'});\r\n */\r\nKJUR.asn1.DEREnumerated = function (params) {\r\n    KJUR.asn1.DEREnumerated.superclass.constructor.call(this);\r\n    this.hT = \"0a\";\r\n    /**\r\n     * set value by Tom Wu's BigInteger object\r\n     * @name setByBigInteger\r\n     * @memberOf KJUR.asn1.DEREnumerated#\r\n     * @function\r\n     * @param {BigInteger} bigIntegerValue to set\r\n     */\r\n    this.setByBigInteger = function (bigIntegerValue) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(bigIntegerValue);\r\n    };\r\n    /**\r\n     * set value by integer value\r\n     * @name setByInteger\r\n     * @memberOf KJUR.asn1.DEREnumerated#\r\n     * @function\r\n     * @param {Integer} integer value to set\r\n     */\r\n    this.setByInteger = function (intValue) {\r\n        var bi = new _jsbn_jsbn__WEBPACK_IMPORTED_MODULE_0__.BigInteger(String(intValue), 10);\r\n        this.setByBigInteger(bi);\r\n    };\r\n    /**\r\n     * set value by integer value\r\n     * @name setValueHex\r\n     * @memberOf KJUR.asn1.DEREnumerated#\r\n     * @function\r\n     * @param {String} hexadecimal string of integer value\r\n     * @description\r\n     * <br/>\r\n     * NOTE: Value shall be represented by minimum octet length of\r\n     * two's complement representation.\r\n     */\r\n    this.setValueHex = function (newHexString) {\r\n        this.hV = newHexString;\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        return this.hV;\r\n    };\r\n    if (typeof params != \"undefined\") {\r\n        if (typeof params['int'] != \"undefined\") {\r\n            this.setByInteger(params['int']);\r\n        }\r\n        else if (typeof params == \"number\") {\r\n            this.setByInteger(params);\r\n        }\r\n        else if (typeof params['hex'] != \"undefined\") {\r\n            this.setValueHex(params['hex']);\r\n        }\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER UTF8String\r\n * @name KJUR.asn1.DERUTF8String\r\n * @class class for ASN.1 DER UTF8String\r\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n * @extends KJUR.asn1.DERAbstractString\r\n * @description\r\n * @see KJUR.asn1.DERAbstractString - superclass\r\n */\r\nKJUR.asn1.DERUTF8String = function (params) {\r\n    KJUR.asn1.DERUTF8String.superclass.constructor.call(this, params);\r\n    this.hT = \"0c\";\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER NumericString\r\n * @name KJUR.asn1.DERNumericString\r\n * @class class for ASN.1 DER NumericString\r\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n * @extends KJUR.asn1.DERAbstractString\r\n * @description\r\n * @see KJUR.asn1.DERAbstractString - superclass\r\n */\r\nKJUR.asn1.DERNumericString = function (params) {\r\n    KJUR.asn1.DERNumericString.superclass.constructor.call(this, params);\r\n    this.hT = \"12\";\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER PrintableString\r\n * @name KJUR.asn1.DERPrintableString\r\n * @class class for ASN.1 DER PrintableString\r\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n * @extends KJUR.asn1.DERAbstractString\r\n * @description\r\n * @see KJUR.asn1.DERAbstractString - superclass\r\n */\r\nKJUR.asn1.DERPrintableString = function (params) {\r\n    KJUR.asn1.DERPrintableString.superclass.constructor.call(this, params);\r\n    this.hT = \"13\";\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER TeletexString\r\n * @name KJUR.asn1.DERTeletexString\r\n * @class class for ASN.1 DER TeletexString\r\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n * @extends KJUR.asn1.DERAbstractString\r\n * @description\r\n * @see KJUR.asn1.DERAbstractString - superclass\r\n */\r\nKJUR.asn1.DERTeletexString = function (params) {\r\n    KJUR.asn1.DERTeletexString.superclass.constructor.call(this, params);\r\n    this.hT = \"14\";\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER IA5String\r\n * @name KJUR.asn1.DERIA5String\r\n * @class class for ASN.1 DER IA5String\r\n * @param {Array} params associative array of parameters (ex. {'str': 'aaa'})\r\n * @extends KJUR.asn1.DERAbstractString\r\n * @description\r\n * @see KJUR.asn1.DERAbstractString - superclass\r\n */\r\nKJUR.asn1.DERIA5String = function (params) {\r\n    KJUR.asn1.DERIA5String.superclass.constructor.call(this, params);\r\n    this.hT = \"16\";\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER UTCTime\r\n * @name KJUR.asn1.DERUTCTime\r\n * @class class for ASN.1 DER UTCTime\r\n * @param {Array} params associative array of parameters (ex. {'str': '130430235959Z'})\r\n * @extends KJUR.asn1.DERAbstractTime\r\n * @description\r\n * <br/>\r\n * As for argument 'params' for constructor, you can specify one of\r\n * following properties:\r\n * <ul>\r\n * <li>str - specify initial ASN.1 value(V) by a string (ex.'130430235959Z')</li>\r\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n * <li>date - specify Date object.</li>\r\n * </ul>\r\n * NOTE: 'params' can be omitted.\r\n * <h4>EXAMPLES</h4>\r\n * @example\r\n * d1 = new KJUR.asn1.DERUTCTime();\r\n * d1.setString('130430125959Z');\r\n *\r\n * d2 = new KJUR.asn1.DERUTCTime({'str': '130430125959Z'});\r\n * d3 = new KJUR.asn1.DERUTCTime({'date': new Date(Date.UTC(2015, 0, 31, 0, 0, 0, 0))});\r\n * d4 = new KJUR.asn1.DERUTCTime('130430125959Z');\r\n */\r\nKJUR.asn1.DERUTCTime = function (params) {\r\n    KJUR.asn1.DERUTCTime.superclass.constructor.call(this, params);\r\n    this.hT = \"17\";\r\n    /**\r\n     * set value by a Date object<br/>\r\n     * @name setByDate\r\n     * @memberOf KJUR.asn1.DERUTCTime#\r\n     * @function\r\n     * @param {Date} dateObject Date object to set ASN.1 value(V)\r\n     * @example\r\n     * o = new KJUR.asn1.DERUTCTime();\r\n     * o.setByDate(new Date(\"2016/12/31\"));\r\n     */\r\n    this.setByDate = function (dateObject) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.date = dateObject;\r\n        this.s = this.formatDate(this.date, 'utc');\r\n        this.hV = stohex(this.s);\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        if (typeof this.date == \"undefined\" && typeof this.s == \"undefined\") {\r\n            this.date = new Date();\r\n            this.s = this.formatDate(this.date, 'utc');\r\n            this.hV = stohex(this.s);\r\n        }\r\n        return this.hV;\r\n    };\r\n    if (params !== undefined) {\r\n        if (params.str !== undefined) {\r\n            this.setString(params.str);\r\n        }\r\n        else if (typeof params == \"string\" && params.match(/^[0-9]{12}Z$/)) {\r\n            this.setString(params);\r\n        }\r\n        else if (params.hex !== undefined) {\r\n            this.setStringHex(params.hex);\r\n        }\r\n        else if (params.date !== undefined) {\r\n            this.setByDate(params.date);\r\n        }\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER GeneralizedTime\r\n * @name KJUR.asn1.DERGeneralizedTime\r\n * @class class for ASN.1 DER GeneralizedTime\r\n * @param {Array} params associative array of parameters (ex. {'str': '20130430235959Z'})\r\n * @property {Boolean} withMillis flag to show milliseconds or not\r\n * @extends KJUR.asn1.DERAbstractTime\r\n * @description\r\n * <br/>\r\n * As for argument 'params' for constructor, you can specify one of\r\n * following properties:\r\n * <ul>\r\n * <li>str - specify initial ASN.1 value(V) by a string (ex.'20130430235959Z')</li>\r\n * <li>hex - specify initial ASN.1 value(V) by a hexadecimal string</li>\r\n * <li>date - specify Date object.</li>\r\n * <li>millis - specify flag to show milliseconds (from 1.0.6)</li>\r\n * </ul>\r\n * NOTE1: 'params' can be omitted.\r\n * NOTE2: 'withMillis' property is supported from asn1 1.0.6.\r\n */\r\nKJUR.asn1.DERGeneralizedTime = function (params) {\r\n    KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, params);\r\n    this.hT = \"18\";\r\n    this.withMillis = false;\r\n    /**\r\n     * set value by a Date object\r\n     * @name setByDate\r\n     * @memberOf KJUR.asn1.DERGeneralizedTime#\r\n     * @function\r\n     * @param {Date} dateObject Date object to set ASN.1 value(V)\r\n     * @example\r\n     * When you specify UTC time, use 'Date.UTC' method like this:<br/>\r\n     * o1 = new DERUTCTime();\r\n     * o1.setByDate(date);\r\n     *\r\n     * date = new Date(Date.UTC(2015, 0, 31, 23, 59, 59, 0)); #2015JAN31 23:59:59\r\n     */\r\n    this.setByDate = function (dateObject) {\r\n        this.hTLV = null;\r\n        this.isModified = true;\r\n        this.date = dateObject;\r\n        this.s = this.formatDate(this.date, 'gen', this.withMillis);\r\n        this.hV = stohex(this.s);\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        if (this.date === undefined && this.s === undefined) {\r\n            this.date = new Date();\r\n            this.s = this.formatDate(this.date, 'gen', this.withMillis);\r\n            this.hV = stohex(this.s);\r\n        }\r\n        return this.hV;\r\n    };\r\n    if (params !== undefined) {\r\n        if (params.str !== undefined) {\r\n            this.setString(params.str);\r\n        }\r\n        else if (typeof params == \"string\" && params.match(/^[0-9]{14}Z$/)) {\r\n            this.setString(params);\r\n        }\r\n        else if (params.hex !== undefined) {\r\n            this.setStringHex(params.hex);\r\n        }\r\n        else if (params.date !== undefined) {\r\n            this.setByDate(params.date);\r\n        }\r\n        if (params.millis === true) {\r\n            this.withMillis = true;\r\n        }\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER Sequence\r\n * @name KJUR.asn1.DERSequence\r\n * @class class for ASN.1 DER Sequence\r\n * @extends KJUR.asn1.DERAbstractStructured\r\n * @description\r\n * <br/>\r\n * As for argument 'params' for constructor, you can specify one of\r\n * following properties:\r\n * <ul>\r\n * <li>array - specify array of ASN1Object to set elements of content</li>\r\n * </ul>\r\n * NOTE: 'params' can be omitted.\r\n */\r\nKJUR.asn1.DERSequence = function (params) {\r\n    KJUR.asn1.DERSequence.superclass.constructor.call(this, params);\r\n    this.hT = \"30\";\r\n    this.getFreshValueHex = function () {\r\n        var h = '';\r\n        for (var i = 0; i < this.asn1Array.length; i++) {\r\n            var asn1Obj = this.asn1Array[i];\r\n            h += asn1Obj.getEncodedHex();\r\n        }\r\n        this.hV = h;\r\n        return this.hV;\r\n    };\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER Set\r\n * @name KJUR.asn1.DERSet\r\n * @class class for ASN.1 DER Set\r\n * @extends KJUR.asn1.DERAbstractStructured\r\n * @description\r\n * <br/>\r\n * As for argument 'params' for constructor, you can specify one of\r\n * following properties:\r\n * <ul>\r\n * <li>array - specify array of ASN1Object to set elements of content</li>\r\n * <li>sortflag - flag for sort (default: true). ASN.1 BER is not sorted in 'SET OF'.</li>\r\n * </ul>\r\n * NOTE1: 'params' can be omitted.<br/>\r\n * NOTE2: sortflag is supported since 1.0.5.\r\n */\r\nKJUR.asn1.DERSet = function (params) {\r\n    KJUR.asn1.DERSet.superclass.constructor.call(this, params);\r\n    this.hT = \"31\";\r\n    this.sortFlag = true; // item shall be sorted only in ASN.1 DER\r\n    this.getFreshValueHex = function () {\r\n        var a = new Array();\r\n        for (var i = 0; i < this.asn1Array.length; i++) {\r\n            var asn1Obj = this.asn1Array[i];\r\n            a.push(asn1Obj.getEncodedHex());\r\n        }\r\n        if (this.sortFlag == true)\r\n            a.sort();\r\n        this.hV = a.join('');\r\n        return this.hV;\r\n    };\r\n    if (typeof params != \"undefined\") {\r\n        if (typeof params.sortflag != \"undefined\" &&\r\n            params.sortflag == false)\r\n            this.sortFlag = false;\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);\r\n// ********************************************************************\r\n/**\r\n * class for ASN.1 DER TaggedObject\r\n * @name KJUR.asn1.DERTaggedObject\r\n * @class class for ASN.1 DER TaggedObject\r\n * @extends KJUR.asn1.ASN1Object\r\n * @description\r\n * <br/>\r\n * Parameter 'tagNoNex' is ASN.1 tag(T) value for this object.\r\n * For example, if you find '[1]' tag in a ASN.1 dump,\r\n * 'tagNoHex' will be 'a1'.\r\n * <br/>\r\n * As for optional argument 'params' for constructor, you can specify *ANY* of\r\n * following properties:\r\n * <ul>\r\n * <li>explicit - specify true if this is explicit tag otherwise false\r\n *     (default is 'true').</li>\r\n * <li>tag - specify tag (default is 'a0' which means [0])</li>\r\n * <li>obj - specify ASN1Object which is tagged</li>\r\n * </ul>\r\n * @example\r\n * d1 = new KJUR.asn1.DERUTF8String({'str':'a'});\r\n * d2 = new KJUR.asn1.DERTaggedObject({'obj': d1});\r\n * hex = d2.getEncodedHex();\r\n */\r\nKJUR.asn1.DERTaggedObject = function (params) {\r\n    KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);\r\n    this.hT = \"a0\";\r\n    this.hV = '';\r\n    this.isExplicit = true;\r\n    this.asn1Object = null;\r\n    /**\r\n     * set value by an ASN1Object\r\n     * @name setString\r\n     * @memberOf KJUR.asn1.DERTaggedObject#\r\n     * @function\r\n     * @param {Boolean} isExplicitFlag flag for explicit/implicit tag\r\n     * @param {Integer} tagNoHex hexadecimal string of ASN.1 tag\r\n     * @param {ASN1Object} asn1Object ASN.1 to encapsulate\r\n     */\r\n    this.setASN1Object = function (isExplicitFlag, tagNoHex, asn1Object) {\r\n        this.hT = tagNoHex;\r\n        this.isExplicit = isExplicitFlag;\r\n        this.asn1Object = asn1Object;\r\n        if (this.isExplicit) {\r\n            this.hV = this.asn1Object.getEncodedHex();\r\n            this.hTLV = null;\r\n            this.isModified = true;\r\n        }\r\n        else {\r\n            this.hV = null;\r\n            this.hTLV = asn1Object.getEncodedHex();\r\n            this.hTLV = this.hTLV.replace(/^../, tagNoHex);\r\n            this.isModified = false;\r\n        }\r\n    };\r\n    this.getFreshValueHex = function () {\r\n        return this.hV;\r\n    };\r\n    if (typeof params != \"undefined\") {\r\n        if (typeof params['tag'] != \"undefined\") {\r\n            this.hT = params['tag'];\r\n        }\r\n        if (typeof params['explicit'] != \"undefined\") {\r\n            this.isExplicit = params['explicit'];\r\n        }\r\n        if (typeof params['obj'] != \"undefined\") {\r\n            this.asn1Object = params['obj'];\r\n            this.setASN1Object(this.isExplicit, this.hT, this.asn1Object);\r\n        }\r\n    }\r\n};\r\n_yahoo__WEBPACK_IMPORTED_MODULE_1__.YAHOO.lang.extend(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/jsrsasign/asn1-1.0.js?");

/***/ }),

/***/ "./lib/lib/jsrsasign/yahoo.js":
/*!************************************!*\
  !*** ./lib/lib/jsrsasign/yahoo.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"YAHOO\": () => (/* binding */ YAHOO)\n/* harmony export */ });\n/*!\r\nCopyright (c) 2011, Yahoo! Inc. All rights reserved.\r\nCode licensed under the BSD License:\r\n*/\r\nvar YAHOO = {};\r\nYAHOO.lang = {\r\n    /**\r\n     * Utility to set up the prototype, constructor and superclass properties to\r\n     * support an inheritance strategy that can chain constructors and methods.\r\n     * Static members will not be inherited.\r\n     *\r\n     * @method extend\r\n     * @static\r\n     * @param {Function} subc   the object to modify\r\n     * @param {Function} superc the object to inherit\r\n     * @param {Object} overrides  additional properties/methods to add to the\r\n     *                              subclass prototype.  These will override the\r\n     *                              matching items obtained from the superclass\r\n     *                              if present.\r\n     */\r\n    extend: function (subc, superc, overrides) {\r\n        if (!superc || !subc) {\r\n            throw new Error(\"YAHOO.lang.extend failed, please check that \" +\r\n                \"all dependencies are included.\");\r\n        }\r\n        var F = function () { };\r\n        F.prototype = superc.prototype;\r\n        subc.prototype = new F();\r\n        subc.prototype.constructor = subc;\r\n        subc.superclass = superc.prototype;\r\n        if (superc.prototype.constructor == Object.prototype.constructor) {\r\n            superc.prototype.constructor = superc;\r\n        }\r\n        if (overrides) {\r\n            var i;\r\n            for (i in overrides) {\r\n                subc.prototype[i] = overrides[i];\r\n            }\r\n            /*\r\n             * IE will not enumerate native functions in a derived object even if the\r\n             * function was overridden.  This is a workaround for specific functions\r\n             * we care about on the Object prototype.\r\n             * @property _IEEnumFix\r\n             * @param {Function} r  the object to receive the augmentation\r\n             * @param {Function} s  the object that supplies the properties to augment\r\n             * @static\r\n             * @private\r\n             */\r\n            var _IEEnumFix = function () { }, ADD = [\"toString\", \"valueOf\"];\r\n            try {\r\n                if (/MSIE/.test(navigator.userAgent)) {\r\n                    _IEEnumFix = function (r, s) {\r\n                        for (i = 0; i < ADD.length; i = i + 1) {\r\n                            var fname = ADD[i], f = s[fname];\r\n                            if (typeof f === 'function' && f != Object.prototype[fname]) {\r\n                                r[fname] = f;\r\n                            }\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n            catch (ex) { }\r\n            ;\r\n            _IEEnumFix(subc.prototype, overrides);\r\n        }\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://JSEncrypt/./lib/lib/jsrsasign/yahoo.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://JSEncrypt/./node_modules/process/browser.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./lib/index.js");
/******/ 	__webpack_exports__ = __webpack_exports__["default"];
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});